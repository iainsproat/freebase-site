/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var queries = acre.require("queries.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var filters = acre.require("lib/filter/filters.sjs");
var filter_validators = acre.require("lib/filter/validators.sjs");

var myfilters = {
  authority: {
    validator: validators.MultiValue,
    options: {validator: validators.MqlId, if_empty:null}
  },
  timestamp: {
    validator: validators.MultiValue,
    options: {validator: filter_validators.Timestamp, if_empty:null}
  },
  as_of_time: {
    validator: validators.Datejs,
    options: {if_invalid:null}
  },
  creator: {
    validator: validators.MultiValue,
    options: {validator: validators.MqlId, if_empty:null}
  }
};

var SPEC = {

  template: "sameas.mjt",

  validate: function(params) {
    return [
      params.object,
      (function() {
        var f = filters.validate(params, myfilters);
        f[params.current_tab.key] = "";
        return f;
      })()
    ];
  },

  run: function(object, f) {
    return queries.keys(object.id, i18n.lang, null, f)
      .then(function(keys) {
        return {
          id: object.id,
          object: object,
          filters: f,
          keys: filter_authority(keys, f),
          authority_count: get_count(keys)
        };
      });
  }
};

// get count by authorities
function get_count(keys) {
  var authorities = [];
  var authorities_count = {};
  keys.forEach(function(key) {
    var a = key.authority;
    if (a) {
      var c = authorities_count[a.id];
      if (!c) {
        c = authorities_count[a.id] = {name:a.name, id:a.id, count:0};
        authorities.push(c);
      }
      c.count += 1;
    }
  });
  return authorities.sort(function(a, b) {
    if (b.count === a.count) {
      return i18n.display_name(b) < i18n.display_name(a);
    }
    else {
      return b.count - a.count;
    }
  });
};


function filter_authority(keys, f) {
  if (f.authority && f.authority.length) {
    var authorities = {};
    f.authority.forEach(function(a) {
      authorities[a] = 1;
    });
    var filtered = [];
    keys.forEach(function(key) {
      var a = key.authority;
      if (a && authorities[a.id]) {
        filtered.push(key);
      }
    });
    return filtered;
  }
  return keys;
};
