/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var flagSearch = acre.require("flagsearch.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var deferred = acre.require("lib/promise/apis.sjs").deferred;
var SPEC = { 
    auth:true, 
    method:"GET",
    validate: function(params) {
        return [
            params.auth_user,           
            (params.limit)   ? validators.Int(params.limit) : null,
            (params.voted)   ? validators.OneOf(params, "voted", {required:true, oneof:["votedon", "notvotedon", "both"] }) : null, 
            (params.created) ? validators.OneOf(params, "created", {required:true, oneof:["notcreated", "created", "both"] }) : null,
            (params.order)   ? validators.OneOf(params, "order", {required:true, oneof:["timeasc", "timedes", "voteasc", "votedes"]}) : null, 
            (params.kind)    ? validators.OneOf(params, "kind", {required:true, oneof:["merge", "split", "offensive", "delete"] }) : null,
            (params.domain)  ? validators.MqlId(params, "domain", {required:true}) : null, 
            (params.admin)   ? validators.OneOf(params, "admin", {required:true, oneof:["nonadmin", "adminonly", "both"] }) : null,
            (params.cursor)  ? validators.String(params.cursor) : null                                   
        ];
    },
    run: function(user, limit, voted, created, order, kind, domain, admin, cursor) {	
        return flagSearch.findFlags(user, limit, voted, created, order, kind, domain, admin, cursor).then(function(envelope){                    
            var flagArray = envelope.result.map(function(item){
                return item.mid;
            });     
            return {
                "flags" : flagArray,
                "cursor": envelope.cursor
            }
        })     
    }
};

