/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var helper = acre.require("lib/helper/helpers.sjs");
var freebase = acre.require("lib/promise/apis").freebase;
var validators = acre.require("lib/validator/validators.sjs");

var SPEC = {  
    auth:true,    
    template: "queue.mjt",
    template_base: "lib/template/freebase.mjt",      
    validate: function(params) {       
        return [
            params.auth_user,
            (params.kind)    ? validators.OneOf(params, "kind", {required:true, oneof:["merge", "split", "offensive", "delete"] }) : null,
            (params.created) ? validators.OneOf(params, "created", {required:true, oneof:["notcreated", "created", "both"] }) : null,
            (params.voted)   ? validators.OneOf(params, "voted", {required:true, oneof:["votedon", "notvotedon", "both"] }) : null,  
            (params.admin)   ? validators.OneOf(params, "admin", {required:true, oneof:["nonadmin", "adminonly", "both"] }) : null, 
            (params.domain)  ? validators.MqlId(params, "domain", {required:true}) : null,
            (params.flags)   ? validators.String(params, "flags", {required:true}) : null,           
        ];
    },
    run: function(user, kind, created, voted, admin, domain, flags) {
    	
        var flagArray = [];
        if(flags) {
            flags = flags.split(",");
            for(var i = 0; i < flags.length; i++) {
                if(isValidMid(flags[i])) {
                    if(flagArray.indexOf(flags[i]) === -1) {
                        flagArray.push(flags[i]);
                    }
                }
            }
            flagArray.push(-1);                    
        }
        if(flagArray.length === 0) {
            flagArray = null;
        }

        return {           
            "params" : {
                "user": user,
                "kind": kind, 
                "created":created,
                "voted": voted,
                "admin": admin,
                "domain": domain,
                "flags": flagArray
            }
        };
    }
};

// Edited from validators to not throw error
function isValidMid(mid){
    if (mid.charAt(0) === '/') {
        var mqlkeys = mid.split("/");
        mqlkeys.shift();  
        for (var i=0, l = mqlkeys.length; i < l; i++) {
            if (!validators.check_mqlkey(mqlkeys[i])) {
                return false;
            }
        }
        return true;
    }
    return false;
}


