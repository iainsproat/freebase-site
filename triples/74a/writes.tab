/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var filters = acre.require("lib/filter/filters.sjs");
var links = acre.require("lib/queries/links.sjs");

/**
 * List of attribution types (object_type) supported by the writes tab.
 */
var ATTRIBUTION_TYPES = [
  '/type/attribution',
  '/type/user',
  '/dataworld/information_source',
  '/dataworld/software_tool',
  '/dataworld/mass_data_operation',
  '/freebase/apps/acre_app'
];

var SPEC = {

  template: "writes.mjt",

  validate: function(params) {
    return [
      params.object,
      params.object_type,
      (function() {
        var f = filters.validate(params, links.links_filters);
        f[params.current_tab.key] = "";
        return f;
      })()
    ];
  },

  run: function(object, object_type, f) {
    var attr_type = object_type.id;
    if (ATTRIBUTION_TYPES.indexOf(attr_type) === -1) {
      // The object_type is an unknown attribution type.
      // Look at object.type_map to get a suitable attribution type.
      ATTRIBUTION_TYPES.every(function(t) {
        if (object.type_map[t]) {
          attr_type = t;
          return false;
        }
        return true;
      });
    }

    var id = object.id;
    return {
      id: id,
      object: object,
      object_type: object_type,

      // filter components
      filters: f,

      writes: links.writes(id, attr_type, f)
    };
  }


};
