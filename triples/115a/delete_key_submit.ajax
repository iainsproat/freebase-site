/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var validators = acre.require("lib/validator/validators.sjs");
var apis = acre.require("lib/promise/apis.sjs");
var freebase = apis.freebase;

/**
 * key add form
 */
var SPEC = {

    method: "POST",

    auth: true,

    validate: function(params) {
        return [
            validators.MqlId(params, "s", {required:true}), // subject id
            validators.OneOf(params, "p", {                 // property id
                required: true, 
                oneof: ["/type/object/key", "/type/namespace/keys"]
            }), 
            validators.MqlId(params, "namespace", {required:true}),
            validators.MqlKey(params, "value", {required:true}),
            validators.LangId(params, "lang", {if_empty:"/lang/en"})  // lang
        ];
    },

    run: function(s, p, namespace, value, lang) {       
        var q = {id:s};
        q[p] = {
            namespace: namespace,
            value: value,
            connect: "delete"
        };
        return freebase.mqlwrite(q)
            .then(function(env) {
                return env.result;
            });
    }
};
