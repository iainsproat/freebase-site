# -*- python -*-

import re
import json
# bbcfg.py contains some parameters that we don't want public (this master file is in googlecode)
import bbcfg
# build steps call some scripts in here
SCRIPTDIR = '/home/acrebbuser/bbstuff'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# This specifies what database buildbot uses to store change and scheduler
# state
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("acrebot", "metaweb")]
c['slaves'].append(BuildSlave("fsbot", "metaweb"))
c['slaves'].append(BuildSlave("acreaebot", "metaweb"))
c['slavePortnum'] = 9989

####### CHANGESOURCES
from buildbot.changes.svnpoller import SVNPoller
tmpl="http://code.google.com/p/acre/source/detail?r=%s"
svn_poller = SVNPoller(
                   svnurl="http://acre.googlecode.com/svn/trunk",
                   pollinterval=3*60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn',
                   revlinktmpl=tmpl,
                   project='acretrunk'
)
c['change_source'] = [ svn_poller ]
tmpl="http://code.google.com/p/freebase-site/source/detail?r=%s"
svn_poller = SVNPoller(
                   svnurl="http://freebase-site.googlecode.com/svn/trunk",
                   pollinterval=3*60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn',
                   revlinktmpl=tmpl,
                   project='freebase-site'
)
c['change_source'].append(svn_poller)

####### SCHEDULERS
# change filters are needed, so the schedulers know which repository to pay attention to
from buildbot.scheduler import Scheduler
from buildbot.schedulers import timed
from buildbot.schedulers import basic
c['schedulers'] = []
from buildbot.schedulers.filter import ChangeFilter
acre_filter = ChangeFilter(
   project='acretrunk'
)

actests = Scheduler(name="acre",
       treeStableTimer=2*60,
       change_filter=acre_filter,
       builderNames=["acretrunk"])
c['schedulers'].append(actests)

fs_filter = ChangeFilter(
   project='freebase-site'
)
c['schedulers'].append(Scheduler(name="fs",
                                 treeStableTimer=2*60,
                                 change_filter=fs_filter,
                                 builderNames=["freebase-site"]))

c['schedulers'].append(basic.Dependent(name="acreae",
                                 upstream=actests,
                                 builderNames=["acreaetrunk"]))
####### BUILDERS
####### BUILDERS

from buildbot.steps import source
from buildbot.process import factory
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Test
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.config import BuilderConfig
from buildbot.process.properties import WithProperties

# by processing xunit-ish output, we can add structured test results
# to be output by the buildbot /json interface
# namely, fail counts and which test ids failed
# for a given run e.g.
# /json/builders/freebase-site/builds?select=-1&as_text=1
def testoutput(rc, stdout, stderr, runid):
  ret = {}
  tr = {}
  c = {}
  c['passed'] = 0
  c['failed'] = 0
  c['skipped'] = 0
  c['errors'] = 0
  ran = 0
  elapsed = None
  bad = 0
  for l in stderr.split('\n'):
    testid = l.split(' ... ')[0]
    if ' ... ok' in l:
      pass
    if ' ... FAIL' in l:
      tr[testid] = 'FAIL'
    if ' ... SKIP' in l:
      tr[testid] = 'SKIP'
    if ' ... ERROR' in l:
      tr[testid] = 'ERROR'
    m = re.match('^Ran (\d+) tests in (.+)s', l)
    if m:
      ran = int(m.groups()[0])
      elapsed = float(m.groups()[1])
    c['elapsed'] = elapsed
    m = re.match('^FAILED \(.*SKIP=(\d+).*\).*', l)
    if m: c['skipped'] = int(m.groups()[0])
    m = re.match('^FAILED \(.*failures=(\d+).*\).*', l)
    if m:
      f = int(m.groups()[0])
      c['failed'] = f
      bad += f
    m = re.match('^FAILED \(.*errors=(\d+).*\).*', l)
    if m:
      f = int(m.groups()[0])
      c['errors'] = f
      bad += f

    if (l.rstrip() == 'OK') and (ran > 0):
      c['passed'] = ran
    m = re.match('^OK \(.*SKIP=(\d+).*\).*', l)
    if m: c['skipped'] = int(m.groups()[0])
    if ran > 0:
      c['passed'] = ran - bad
  c['testresults'] = tr
  return {"testoutput:%s" % runid:c}

# parse output from acre's test driver
def testng_output(rc, stdout, stderr, runid):
    for l in stdout.split('\n'):
        m = re.match("json=({.+})", l)
        if m:
            obj= json.loads(m.groups()[0])
            return {"testoutput:%s" % runid: obj}

def noseoutput(rc, stdout, stderr):
    return testoutput(rc, stdout, stderr, "acre-nose")

def fsoutput(rc, stdout, stderr):
    return testng_output(rc, stdout, stderr, "freebase-site")

def ngoutput(rc, stdout, stderr):
    return testng_output(rc, stdout, stderr, "acre-testng")

# tests acre/trunk
f1 = factory.BuildFactory()
f1.addStep(source.SVN(svnurl="http://acre.googlecode.com/svn/trunk/"))
f1.addStep(ShellCommand,
  command="./acre stop",
  name='acre stop',
  description='stop acre',
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command="./acre build",
  description='build acre',
  name='acre build',
  haltOnFailure=True,
  flunkOnFailure=True
)
f1.addStep(ShellCommand,
  command='./acre freebase_check',
  description='verifying sandbox api',
  name='sandbox pre-check',
  haltOnFailure=True,
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command=SCRIPTDIR+'/acrebotsetup.sh',
  description='acre test cfg'
)
f1.addStep(ShellCommand,
  command="./acre -c acrebot start",
  name='acre start',
  haltOnFailure=True,
  description='start acre'
)
f1.addStep(SetProperty(
  command="./acre -c acrebot test",
  name='acre tests (python)',
  description='test acre (python tests)',
  extract_fn=noseoutput
))
f1.addStep(SetProperty(
  command="./acre -c acrebot testng --jsn --no-color qa",
  name='acre test (javascript)',
  description='test acre (javascript tests)',
  extract_fn=ngoutput
))
f1.addStep(ShellCommand,
  command="./acre stop",
  name='acre stop',
  description='stop acre'
)

b1 = BuilderConfig(name="acretrunk",
      slavename="acrebot",
      builddir="acre",
      factory=f1)
c['builders'] = [b1]

# tests acre/trunk with appengine
f1 = factory.BuildFactory()
f1.addStep(source.SVN(svnurl="http://acre.googlecode.com/svn/trunk/"))
f1.addStep(ShellCommand,
  command="./acre stop",
  name='acre stop',
  description='stop acre',
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command=SCRIPTDIR+'/acreaebotsetup.sh',
  description='acre test cfg'
)
f1.addStep(ShellCommand,
  command="./acre -c aeacrebot appengine-build",
  description='build acre',
  name='acre build',
  haltOnFailure=True,
  flunkOnFailure=True
)
f1.addStep(ShellCommand,
  command='./acre freebase_check',
  description='verifying sandbox api',
  name='sandbox pre-check',
  haltOnFailure=True,
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command="./acre -c aeacrebot start",
  name='acre ae start',
  haltOnFailure=True,
  description='start ae acre'
)
f1.addStep(ShellCommand,
  command='./acre -c aeacrebot status',
  name='acre ae status check',
  haltOnFailure=True,
  description='acre status check'
)
f1.addStep(SetProperty(
  command="./acre -c aeacrebot test",
  name='acre tests (python)',
  description='test acre (python tests)',
  extract_fn=noseoutput
))
f1.addStep(SetProperty(
  command="./acre -c aeacrebot testng --jsn --no-color qa",
  name='acre test (javascript)',
  description='test acre (javascript tests)',
  extract_fn=ngoutput
))
f1.addStep(ShellCommand,
  command="./acre stop",
  name='acre stop',
  description='stop acre'
)

b1 = BuilderConfig(name="acreaetrunk",
      slavename="acreaebot",
      builddir="acreae",
      factory=f1)
c['builders'].append(b1)


# freebase-site buildbot
f1 = factory.BuildFactory()
f1.addStep(source.SVN(svnurl="http://freebase-site.googlecode.com/svn", depth="immediates"))
f1.addStep(ShellCommand(
  command=["svn", "up", "--set-depth", "infinity", "-r", WithProperties("%(revision)s"), "trunk"]
))
f1.addStep(ShellCommand(
  command=["svn", "up", "--set-depth", "infinity", "-r", WithProperties("%(revision)s"), "environments"]
))
f1.addStep(ShellCommand,
  command="acretrunk/acre stop",
  name='acre stop',
  description='stop acre',
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command='rm -rf acretrunk',
  description='rm acre installation',
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command='svn co http://acre.googlecode.com/svn/trunk acretrunk',
  description='checkout acre trunk',
  name='checkout acre trunk',
  haltOnFailure=True,
  flunkOnFailure=True
)
f1.addStep(ShellCommand,
  command="acretrunk/acre build",
  description='build acre',
  name='acre build',
  haltOnFailure=True,
  flunkOnFailure=True
)
f1.addStep(ShellCommand,
  command='acretrunk/acre freebase_check',
  description='verifying sandbox api',
  name='sandbox pre-check',
  haltOnFailure=True,
  flunkOnFailure=False
)
f1.addStep(ShellCommand,
  command=SCRIPTDIR+'/fsbotsetup.sh',
  haltOnFailure=True,
  name='freebase-site setup script',
  description='various freebase-site setup steps'
)
f1.addStep(ShellCommand,
  command="acretrunk/acre -c fsbot start",
  name='acre start',
  description='start acre'
)
f1.addStep(SetProperty(
  command='acretrunk/acre -c fsbot testfs -n -j',
  name='freebase-site tests',
  description='test freebase-site',
  extract_fn=fsoutput
))
f1.addStep(ShellCommand,
  command="acretrunk/acre stop",
  name='acre stop',
  description='stop acre'
)


from buildbot.config import BuilderConfig
b1 = BuilderConfig(name="freebase-site",
      slavename="fsbot",
      builddir="fs",
      factory=f1)
c['builders'].append(b1)

####### STATUS TARGETS
c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = True
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, numbuilds=50))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="donotrespond@google.com",
   extraRecipients=bbcfg.cfg["extraRecipients"],
   lookup='google.com',
   mode='problem'
))

#import buildbot.status.status_push
import custom_status_push
sp = custom_status_push.CustomStatusPush(
        serverUrl=bbcfg.cfg["dburl"], authkey=bbcfg.cfg["authkey"])
c['status'].append(sp)

c['projectName'] = "acre"
c['projectURL'] = "http://code.google.com/p/acre/"
c['buildbotURL'] = "http://acrebb.hot.corp.google.com:8010/"

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


