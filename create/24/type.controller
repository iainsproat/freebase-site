/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var propbox_helpers = acre.require("lib/propbox/helpers.sjs");
var propbox_queries = acre.require("lib/propbox/queries.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var apis = acre.require("lib/promise/apis.sjs");
var deferred = apis.deferred;
var freebase = apis.freebase;
var typeloader = acre.require("lib/schema/typeloader.sjs");
var proploader = acre.require("lib/schema/proploader.sjs");


var scope = this;
/**
 * Create an instance of a type
 */

var SPEC = {

  template: "type.mjt",

  validate: function(params) {
    return [
      params.object,
      h.get_account_cookie()
    ];
  },

  run: function(type, user) {
    /**
     * Prevent creating instance of metaweb system types
     */
    if (h.is_metaweb_system_type(type.id)) {
      return {
        template: "type_system.mjt",
        object: type
      };
    }
    else if (!user) {
      return h.redirect(scope, h.fb_url("/account/signin", {
          onsignin:scope.acre.request.url
      }));
    }

    var lang = i18n.lang;

    /**
     * We want to use propbox components and editparams to create a new instance of type.
     *
     * We do this by using type as the subject and /type/type/instance as the predicate:
     *
     * <type id> </type/type/instance> <object...>
     *
     * To do this, we need to "fake" the property structure of "/type/type/instance",
     * specifically the expected_type to include the included_types of type since
     * expected_type of /type/type/instance is just /type/object.
     *
     * We also "fake" the expected_type's disamibiguating properties to include the
     * type's disambiguating properties along with it's included_types disambiguating properties.
     */

    return typeloader.load(type.id)
      .then(function(result) {
          var type_schema = result[type.id];
          var mediator = type_schema["/freebase/type_hints/mediator"];
          var inc_types = type_schema["/freebase/type_hints/included_types"];
          var promises = {
            // explicitly get /type/type/instance
            instance_prop: propbox_queries.prop_structure("/type/type/instance", lang)
          };
          if (!mediator) {
            // get /type/object/name prop schemas for non mediator
            promises.name_prop = propbox_queries.prop_structure("/type/object/name", lang);
          };
          if (inc_types && inc_types.length) {              
              promises.included_types = typeloader.load.apply(null, inc_types);
          }
          return deferred.all(promises)
              .then(function(result) {
                  var instance_prop = result.instance_prop;
                  var prop_structures = [];
                  if (result.name_prop) {
                      // we should prompt for name if not a mediator
                      prop_structures.push(result.name_prop);
                  }
                  // gather all disambiguating properties to display/prompt
                  // including the type's own and it's included_types'
                  // disambiguators.
                  var types = [type_schema];
                  var included_types = result.included_types;
                  if (included_types) {
                      // "fake" /type/object included_types
                      // so that the newly created instance will 
                      // included these types
                      instance_prop.expected_type.included_types = inc_types;
                      inc_types.forEach(function(inc_type_id) {
                          var inc_type = included_types[inc_type_id];
                          if (inc_type) {
                              types.push(inc_type);
                          }
                      });
                  }
                  types.forEach(function(schema) {
                      var props = schema.properties;
                      if (props) {
                          props.forEach(function(prop) {
                              if (prop["/freebase/property_hints/disambiguator"] &&
                                  !prop.expected_type["/freebase/type_hints/mediator"]) {
                                  prop_structures.push(propbox_helpers.to_prop_structure(prop, lang));
                              }
                          });
                      }
                  });
                  promises = [];
                  prop_structures.forEach(function(prop_structure) {
                      // attach all enumerations (/freebase/type_hints/enumeration)
                      promises.push(propbox_queries.get_enumerated_types(prop_structure, lang));
                  });
                  return deferred.all(promises)
                      .then(function() {
                          instance_prop.properties = prop_structures;
                          return {
                              object: type_schema,
                              prop_structure: instance_prop
                          };
                      });
              });
      });
  }
};


/**
 * Can you create an instance of this type (object)
 */
function can_create(o) {
  var types = h.map_array(o.type, "id");
  return types["/type/type"] && !h.is_metaweb_system_type(o.id);
};
