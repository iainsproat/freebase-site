/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var apis = acre.require("lib/promise/apis.sjs");
var freebase = apis.freebase;
var deferred = apis.deferred;
var t = acre.require("formbuilder.mjt");
var proploader = acre.require("lib/schema/proploader.sjs");
var propbox_queries = acre.require("lib/propbox/queries.sjs");

var SPEC = {

    template: "formbuilder.mjt",

    validate: function(params) {
        return [
            validators.MqlId(params, "id", {required:true}),
            validators.MultiValue(params, "p", {
                validator: validators.MqlId,
                if_empty: []
            }),
            validators.Int(params, "limit", {if_empty:101}),
            validators.LangId(params, "lang", {if_empty:"/lang/en"})
        ];
    },

    run: function(id, pids, limit, lang) {
        var topic_options = {
            lang: h.lang_code(i18n.get_lang(true, lang)),
            filter: pids.concat([
                "/type/object/name"
            ]),
            limit: limit
        };
        var promises = {
            topic: freebase.get_topic(id, topic_options),
            structures: propbox_queries.prop_structures(pids, lang)
        };
        return deferred.all(promises)
            .then(function(r) {
                var propboxes = [];
                var topic = r.topic;
                // TODO: assert topic was loaded from topic api
                var structures = r.structures;
                structures.forEach(function(structure) {
                    if (structure) {
                        var p = topic.property[structure.id];
                        var values = [ ];
                        if (p && p.values) {
                            values = p.values;
                        }
                        propboxes.push({
                            structure: structure,
                            values: values
                        });
                    }
                });
                var name = topic.property['/type/object/name'];
                if (name && name.values && name.values.length) {
                    name = name.values[0].text;
                }
                else {
                    name = topic.id;
                }
                return {
                    id: topic.id,
                    name: name,
                    topic: topic,
                    propboxes: propboxes
                };
            });
    }
};


