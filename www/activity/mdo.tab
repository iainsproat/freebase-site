/*
 * Copyright 2011, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var i18n = acre.require("lib/i18n/i18n.sjs");
var apis = acre.require("lib/promise/apis.sjs");

var SPEC = {

  template: "mdo.mjt",

  validate: function(params) {
    return [
      params.object,
      params.app
    ];
  },

  run: function(object, app) {
    var promises = {
      attributions: mdo_writes(object.id),
      object: object
    };
    return apis.deferred.all(promises);
  }
};

var mdo_writes = function(mdoid) {
  var q = [{
    "type": "/type/attribution",
    "/dataworld/provenance/data_operation": {
      "id": mdoid
    },
    "id": null,
    "links": {
      "return": "count",
      "optional": true
    },
    "attributed": {
      "return": "count",
      "optional": true
    }
  }];

  return apis.freebase.mqlread(q)
    .then(function(envelope) {
      var attributions = [];
      envelope.result.forEach(function(attr) {
        var attribution = {
          id:attr.id,
          links: attr.links,
          topics: attr.attributed
        };
        attributions.push(attribution);
      });
      return attributions;
    });
};

