/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var object = this.obj;  // from lib/routing/object.sjs

var i18n = acre.require("lib/i18n/i18n.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var deferred = acre.require("lib/promise/deferred");
var freebase = acre.require("lib/promise/apis").freebase;

var SPEC = {

  method: "GET",

  auth: false,

  cache_policy: "public",

  template: "group.mjt",

  template_base: "lib/template/freebase_object.mjt",

  validate: function(params) {
    return [
      validators.MqlId(acre.request.path_info, {required:true})
    ];
  },

  run: function(id) {
    return {
      object: object,
      owners: domain_owners(id),
      watchers: domain_watchers(id)
    };
  }
};


function domain_owners(id) {
  return freebase.mqlread({
    id: id,
    type: "/type/domain",
    owners: [{
      optional: true,
      member: [{
        id: null,
        name: i18n.mql.query.name(),
        timestamp: null,
        type: "/type/user",
         "!/freebase/user_activity/user": {
           "optional": true,
           "/freebase/user_activity/primitives_live": null
         },
         "/freebase/user_profile/favorite_domains": [{
           id: null,
           name: i18n.mql.query.name(),
           optional: true
         }]
      }]
    }]
  })
  .then(function(env) {
    var owners = [];
    var domain = env.result;
    if (domain) {
      domain.owners.forEach(function(group) {
        group.member.forEach(function(member) {
          member.assertions = member["!/freebase/user_activity/user"] && member["!/freebase/user_activity/user"]["/freebase/user_activity/primitives_live"] || 0;
          member.watching = member["/freebase/user_profile/favorite_domains"].filter(function(d) {
            return d.id !== id;
          }).sort(by_name);
          owners.push(member);
        });
      });
    }
    return owners;
  });
};

function domain_watchers(id) {
  return freebase.mqlread([{
    id: null,
    name: i18n.mql.query.name(),
    timestamp: null,
    type: "/type/user",
    "!/freebase/user_activity/user": {
      "optional": true,
      "/freebase/user_activity/primitives_live": null
    },
    "/freebase/user_profile/favorite_domains": [{
      id: null,
      name: i18n.mql.query.name()
    }],
    "watching:/freebase/user_profile/favorite_domains": {
      id: id
    }
  }]).
  then(function(env){
    var users = env.result;
    var watchers = [];
    if(users) {
      for(i in users) {
        var user = users[i];
        var watcher = {
          id: user.id,
          name: user.name,
          full_name: user["/freebase/user_profile/my_full_name"],
          quote: user["/freebase/user_profile/personal_quote"],
          joined: user.timestamp,
          watching: user["/freebase/user_profile/favorite_domains"].filter(function(d) {
            return d.id !== id;
          }).sort(by_name)
        };
        if(user["!/freebase/user_activity/user"]) {
          watcher.assertions = user["!/freebase/user_activity/user"] && user["!/freebase/user_activity/user"]["/freebase/user_activity/primitives_live"] || 0;
        }
        watchers.push(watcher);
      }
    }
    return watchers.sort(by_name);
  });
};


function by_name(a, b) {
  return i18n.display_name(b).toLowerCase() < i18n.display_name(a).toLowerCase();
};
