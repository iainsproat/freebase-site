/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("lib/validator/validators.sjs");
var object_query = acre.require("lib/queries/object.sjs").object;
var deferred = acre.require("lib/promise/deferred");
var freebase = acre.require("lib/promise/apis").freebase;

var SPEC = {

  method: "GET",

  auth: false,

  cache_policy: "public",

  template: "group.mjt",

  template_base: "lib/template/freebase_object.mjt",

  validate: function(params) {
    return [
      validators.MqlId(acre.request.path_info, {required:true})
    ];
  },

  run: function(id) {
    return {
      object: object_query(id),
      owners: domain_owners(id),
      watchers: domain_watchers(id)
    };
  }
};


function domain_owners(id) {
  return freebase.mqlread({
    id: id,
    type: "/type/domain",
    owners: [{
      optional: true,
      member: [{
        id: null,
        name: null,
        timestamp: null,
         "!/freebase/user_activity/user": {
           "optional": true,
           "/freebase/user_activity/primitives_live": null
         },
         "/freebase/user_profile/favorite_domains": [{
           id: null,
           name: null,
           optional: true
         }]
      }]
    }]
  })
  .then(function(env) {
    var domain = env.result;
    if (domain) {
      return domain.owners;
    }
    return [];
  });
};

function domain_watchers(id) {
  return freebase.mqlread([{
    id: null,
    name: null,
    "!/freebase/user_activity/user": {
      "optional": true,
      "/freebase/user_activity/primitives_live": null
    },
    timestamp: null,
    "/freebase/user_profile/personal_quote": null,
    "/freebase/user_profile/my_full_name": null,
    "a:/freebase/user_profile/favorite_domains": [{
      id: null,
      name: null
    }],
    type: "/type/user",
    "/freebase/user_profile/favorite_domains": {
      id: id,
    }
  }]).
  then(function(env){
    var users = env.result;
    var watchers = []
    if(users) {
      for(i in users) {
        var watcher = {
          id: users[i].id,
          name: users[i].name,
          full_name: users[i]["/freebase/user_profile/my_full_name"],
          quote: users[i]["/freebase/user_profile/personal_quote"],
          joined: users[i].timestamp,
          watching: users[i]["a:/freebase/user_profile/favorite_domains"]
        }
        if(users[i]["!/freebase/user_activity/user"]) {
          watcher.assertions = users[i]["!/freebase/user_activity/user"]["/freebase/user_activity/primitives_live"]
        }
        watchers.push(watcher);
      }
    }
    return watchers; 
  });
};
