<!!--
 Copyright 2010, Google Inc.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:

     * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above
 copyright notice, this list of conditions and the following disclaimer
 in the documentation and/or other materials provided with the
 distribution.
     * Neither the name of Google Inc. nor the names of its
 contributors may be used to endorse or promote products derived from
 this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 !!-->

<acre:script>
  var c = this.exports.c = {};
  var h = acre.require("lib/helper/helpers.sjs");
  var propbox = acre.require("lib/propbox/propbox.mjt");
  var ph = acre.require("lib/propbox/helpers.sjs");
  var image = acre.require("lib/template/imagecomponents");
  var i18n = acre.require("lib/i18n/i18n.sjs");
  var i18n_c = acre.require("lib/i18n/components.mjt");
  var _ = i18n.gettext;
  var lang = i18n.lang;
</acre:script>

<acre:block def="head()">
  <link rel="stylesheet" type="text/css" href="data.mf.css" />
</acre:block>

<acre:block def="breadcrumb()">
  <div class="page-header clear">
    <div class="breadcrumb clear">
      <ol>
        <li class="breadcrumb-item">
          <span class="breadcrumb-item-inner">
            <a href="${h.fb_url(c.object.id)}">${i18n.display_name(c.object)}</a>
          </span>
        </li>
        <li if="c.domain" class="breadcrumb-item last">
          <span class="breadcrumb-item-inner">
            <a href="#">${_("Data")}</a>
          </span>
        </li>
      </ol>
    </div>
  </div>
</acre:block>

<acre:block def="nav_utilities()">
  <li>
    <a href="${h.fb_url('/query/editor', '')}" class="icon-link">
     <span class="query-icon">${_('Edit Query')}</span>
    </a>
  </li>
</acre:block>

<acre:block def="page_content()">
  <acre:script>
  console.log(c.object);
  </acre:script>
  <div class="section instances">

    <!!-- Object summary -->

    <!!-- Type table -->
    <acre:block if="c.table.table_type === 'type'">
      ${JSON.stringify(c.table.activity)}
      ${type_table(c.table.instances, c.table.properties, c.table.is_mediator)}
    </acre:block>

    <!!-- Prop detail table -->
    <acre:block if="c.table.table_type === 'prop_detail'">
    </acre:block>

    <!!-- Query table -->
    <acre:block if="c.table.table_type === 'query'">
      <table acre:if="c.table.result" class="data-table">
        <thead>
          <tr>
            <th>${_('Name')}</th>
            <th>${_('id')}</th>
          </tr>
        </thead>
        <tbody>
        <tr acre:for="r in c.table.result">
          <th scope="row"><a href="${h.fb_url(r.id)}">$r.name</a></th>
          <td><a href="${h.fb_url(r.id)}">$r.id</a></td>
        </tr>
        </tbody>
      </table>
    </acre:block>
  </div>

</acre:block>

<acre:block def="render_type_table_head(table_head, properties, is_mediator)">
<!--
If any of the properties are of type mediator, we have to build
an extra row in <thead>
<tr acre:if="table_head && table_head.length > 0">
  If the root type is not a mediator, we want to
  spit out a Name column first in the table
  <acre:block if="!is_mediator">
    <acre:script>
      var rowspan = table_head.length + 1;
    </acre:script>
    <th rowspan="$rowspan"> ${_("Name")} </th>
    <th rowspan="$rowspan">${_("Image")}</th>
  </acre:block>

  Iterate through the super columns (properties which are mediators) 
  <th acre:for="column in table_head"
      acre:if="table_head && table_head.length"
      colspan="$column.colspan"
      style="text-align:center">${column.name}
  </th> 
</tr>
-->

<!!--
Iterate through standard properties
-->
<tr>
  <acre:block if="!is_mediator && table_head.length===0">
    <th> ${_("Name")} </th>
    <th>${_("Image")}</th>
  </acre:block>

  <acre:block for="prop in properties"> 
    <acre:script>
      var colspan = 0;
      if(prop['properties']) {
      var colspan = prop.properties.length;
      }
    </acre:script>
    <!!-- Handle mediator properties -->
    <acre:block if="prop['expected_type']['mediator'] === true">
      <th colspan="1" rowspan="1" acre:for="p in prop['properties']">
        $p.text
      </th>
    </acre:block>
    <acre:block else="">
      <!!-- TODO: localize output -->
      <th>${i18n.display_name(prop)}</th>
    </acre:block>
  </acre:block>
</tr>
</acre:block>

<acre:block def="render_type_table_body_row(instance, properties, is_mediator)">
  <!!--
  If the root type is not a mediator, we want to
  spit out a Name and Image column first in the table
  -->
  <td acre:if="instance.name && !is_mediator" rowspan="1">
    <a href="${h.fb_url(instance.id)}" title="${_('View topic')}">
      ${i18n.display_name(instance)}
    </a>
  </td>
  <td acre:if="!is_mediator">
    <acre:script>var options = {mode: "fillcropmid"};</acre:script>
    ${image.image_thumb(instance.id, 50, options)}
  </td>
  <acre:block for="prop in properties">
    <acre:script>
      var values = ph.to_prop_values(prop, instance[prop.id], lang) 
    </acre:script>
    <acre:block if="prop['properties']">
      <acre:block for="key, val in values">
        <td>${JSON.stringify(val)}</td>
      </acre:block>
    </acre:block>
    <acre:block else="">
      <td>
        <ul class="data-list">
        <acre:block for="k, val in values">
          <acre:block if="val.id">
          <li>
          <span class="wrapper">
            <a class="property-value" href="${h.fb_url('', val.id)}">$val.text</a>
          </span>
          </li>
          </acre:block>
          <acre:block else="">
            <li>${val.text}</li>
          </acre:block>
        </acre:block>
        </ul>
      </td>
    </acre:block>
  </acre:block>
</acre:block>

<!!-- Render a single table row -->
<acre:block def="render_type_table_body(instances, properties, is_mediator)">
<tr acre:for="instance in instances" class="data-row">
  ${render_type_table_body_row(instance, properties, is_mediator)}
</tr>
</acre:block>

<acre:block def="type_table(instances, properties, is_mediator)">
  <acre:script>
   var table_head = [];
   for(i=0; i<properties.length; i++) {
     var table_column = {};
     if(properties[i].properties) {
       console.log('property', properties[i].properties)
       var colspan = properties[i].properties.length;  

       var column = {
       "index": i,
       "colspan": colspan,
       "name": properties[i].text
       }

       table_head.push(column);
     }
   }
  </acre:script>
  <table class="data-table" acre:if="instances">
    <thead>
      ${render_type_table_head(table_head, properties, is_mediator)}
    </thead>
    <tbody>
      ${render_type_table_body(instances, properties, is_mediator)}
    </tbody>
  </table>
</acre:block> 

<acre:block def="footer_script()">
  <script src="http://freebaselibs.com/static/freebase_site/static/jquery.tablesorter.js"></script>
  <script src="data.mf.js"></script>
</acre:block>
