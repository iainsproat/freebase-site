/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var filters = acre.require("lib/filter/filters.sjs");
var filter_queries = acre.require("lib/filter/queries.sjs");
var filter_validators = acre.require("lib/filter/validators.sjs");
var th = acre.require("helpers.sjs");

var queries = acre.require("queries");

var inspect_filters = {
  limit: {
    validator: validators.Int,
    options: {if_empty:null}
  },
  history: {
    validator: validators.StringBool,
    options: {if_empty:null}
  },
  timestamp: {
    validator: validators.MultiValue,
    options: {validator: filter_validators.Timestamp, if_empty:null}
  },
  creator: {
    validator: validators.MultiValue,
    options: {validator: validators.MqlId, if_empty:null}
  }
};


var SPEC = {

  template: "triples.mjt",

  validate: function(params) {
    return [
      params.object,
      (function() {
        var f = filters.validate(params, inspect_filters);
        f[params.current_tab.key] = "";
        return f;
      })()
    ];
  },

  run: function(object, f) {

    var id = object.id;
    return {
      id: id,
      object: object,

      // filter components
      filters: f,
      prop_counts: filter_queries.prop_counts(object.guid),

      // inspect components
      names_aliases: queries.names_aliases(id, f),
      keys: queries.keys(id, f),
      outgoing: queries.outgoing(id, f),
      incoming: queries.incoming(id, f),
      type_links: queries.type_links(id, f),
      attribution_links: queries.attribution_links(id, f)

    };
  }


};
