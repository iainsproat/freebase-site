/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require('lib/helper/helpers.sjs');
var validators = acre.require('lib/validator/validators.sjs');
var links = acre.require('queries.sjs');
var deferred = acre.require('lib/promise/deferred.sjs');

/**
 * Writes for:
 * <ul>
 *   <li>/freebase/apps/acre_app</li>
 *   <li>/dataworld/software_tool</li>
 *   <li>/dataworld/mass_data_operation</li>
 *   <li>/dataworld/information_source</li>
 * </ul>
 */
var SPEC = {

  template: 'links.mjt',

  validate: function(params) {
    return [
      params.object,
      params.object_type,
      params.current_tab,
      validators.MultiValue(params, 'filter', {
          validator: validators.MqlId,
          if_empty: []
        }),
      validators.StringBool(params, 'historical', {if_empty:false}),
      validators.OneOf(params, 'sort', {
          if_empty: '-timestamp',
          oneof: ['timestamp', '-timestamp']
        }),
      validators.StringBool(params, 'fullts', {if_empty:false}),
      validators.StringBool(params, 'fullattr', {if_empty:false}),
      validators.MultiValue(params, 'timestamp', {
        if_empty: null,
        validator: validators.Timestamp
      })
    ];
  },

  run: function(
      object, object_type, current_tab,
      filter, historical, sort, fullts, fullattr, timestamp) {
    var id = object.id;
    // Some provenance /dataworld/information_source are
    // co-typed as /common/topic (i.e. /en/stanford_university).
    // In such cases, the object_type is /common/topic. Thus we
    // need to issue a query to get a valid provenance type.
    return links.get_valid_provenance_type(id, object_type)
      .then(function(provenance_type) {
        if (!provenance_type) {
          throw "Invalid provenance " + id;
        }
        var promises = {
          links: links.get_links_by_provenance(
              id, provenance_type, filter, historical, sort, timestamp)
        };
        return deferred.all(promises)
          .then(function(r) {
            return h.extend({
              id: id,
              object: object,
              object_type: object_type,
              current_tab: current_tab,
              provenance_type: provenance_type,
              linked_id: null,
              filter: filter,
              creator: id,
              historical: historical,
              sort: sort,
              fullts: fullts,
              fullattr: fullattr,
              timestamp: timestamp
            }, r);
          });
      });
  }
};
