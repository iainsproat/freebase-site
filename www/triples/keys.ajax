/*
 * Copyright 2013, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require('lib/validator/validators.sjs');
var q = acre.require('queries.sjs');
var t = acre.require('keys.mjt');

var SPEC = {

  validate: function(params) {
    return [
      validators.MqlId(params, "id", {if_empty:null, if_invalid:null}),
      validators.OneOf(params, "property", {                 // property id
          required: true,
          oneof: ["/type/object/key", "/type/namespace/keys"]
      }),
      validators.MqlId(params, 'creator', {if_empty:null}),
      validators.StringBool(params, 'historical', {if_empty:false}),
      validators.OneOf(params, 'sort', {
        if_empty: '-timestamp',
        oneof: ['timestamp', '-timestamp']
      }),
      validators.MultiValue(params, 'timestamp', {
        if_empty: null,
        validator: validators.Timestamp
      }),
      validators.Timestamp(params, 'next', {if_empty:null}),
      validators.Int(params, 'offset', {if_empty:0})
    ];
  },

  run: function(
      id, property, creator, historical, sort, timestamp, next, offset) {
    return q.get_links(
        id, [property], creator, historical, sort, timestamp, next)
      .then(function(keys) {
        return {
          html: acre.markup.stringify(
              t.keys_body(id, property, keys, historical, offset))
        };
      });
  }
};

