/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var queries = acre.require("queries.sjs");
var t = acre.require("links.mjt");
var validators = acre.require("lib/validator/validators.sjs");
var apis = acre.require("lib/promise/apis.sjs");
var freebase = apis.freebase;
var deferred = apis.deferred;

/**
 * Revert writes form
 */
var SPEC = {

    method: "GET",

    auth: true,

    validate: function(params) {
        return [
            validators.MqlId(params, "id", {required:true}),
            validators.String(params, "timestamp", {required:true}),
            validators.LangId(params, "lang", {if_empty:"/lang/en"}),
            params.auth_user
        ];
    },

    run: function(id, timestamp, lang, auth_user) {
        var q = {
            "id": id,
            "type": {
                "id": "/type/user"
            }
        };
        var promises = {
            "has_right": queries.has_right_to_revert(auth_user.id, id),
            "object_type": freebase.mqlread(q)
        };

        return deferred.all(promises).then(function(result){
            if (result.has_right) {
                var is_user = result &&
                        result.object_type &&
                        result.object_type.result;
                is_user = !!is_user;
                return {
                    html: acre.markup.stringify(
                        t.revert_writes_form(id, is_user, timestamp, lang))
                };
            } else {
                return {
                    error: "You don't have right to revert"
                };
            }
        }, function(err) {
            return {
                error: err
            };
        });
    }
};


