/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var apis = acre.require("lib/promise/apis.sjs");
var freebase = apis.freebase;
var deferred = apis.deferred;
var apps_queries = acre.require("lib/queries/apps.sjs");
var q = acre.require("queries.sjs");
var components = acre.require("components.mjt");


var FLYOUTS = {
    "/freebase/apps/acre_app": q.acre_app,
    "/type/domain": q.domain,
    "/type/type": q.type,
    "/type/property": q.property,
    "/type/user": q.user,
    "/freebase/query": q.query,
    "/common/image": q.image,
    "/book/book_edition": q.book_edition,
    "/common/topic": q.topic
};

var SPEC = {

    validate: function(params) {
        return [
            params.object,
            params.object_type.id,
            validators.LangId(params, "lang", {if_empty:"/lang/en"}),
            validators.Jsonp(params, "callback", {if_empty:null})
        ];
    },

    run: function(object, object_type, lang, callback) {
        var id = object.id;
        var flyout_query = FLYOUTS[object_type];
        if (flyout_query) {
            if (object_type === "/common/topic") {
                // is this a book edition?
                object.type.every(function(t) {
                    if (t.id === "/book/book_edition") {
                        flyout_query = q.book_edition;
                        return false;
                    }
                    return true;
                });
            }
        }
        else {
            flyout_query = q.unknown;
        }
        return flyout_query(object, lang)
            .then(function(flyout) {
                if (callback) {
                    acre.response.set_header('content-type', 'text/javascript; charset=utf-8');
                    var json = {
                        id: id,
                        html: acre.markup.stringify(components.render_flyout(id, lang, flyout))
                    };
                    var str = [
                        "/** this is jsonp **/ ",
                        callback,
                        "(",
                        JSON.stringify(json),
                        ");"
                    ];
                    acre.write(str.join(""));
                    return acre.exit();
                }
                else {
                    acre.response.set_header('content-type', 'text/html');
                    return {
                        template: "components.mjt",
                        def: "render_flyout",
                        def_args: [id, lang, flyout]
                    };
                }
            });
    }

 
};
