/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("lib/validator/validators.sjs");
var apis = acre.require("lib/promise/apis");
var freebase = apis.freebase;
var deferred = apis.deferred;
var components = acre.require("manage_type_components.mjt");
var topic_api = acre.require("lib/queries/topic.sjs");

/**
 * remove type form
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "id", {required:true}),
      validators.MqlId(params, "type", {required:true}),
      validators.LangId(params, "lang", {if_empty:"/lang/en"})
    ];
  },

  run: function(id, type, lang) {
    var q = {
      id: type,
      "/freebase/type_hints/included_types": [{
        id: null,
        optional: true,
        index: null,
        sort: "index"
      }]
    };
    return freebase.mqlread(q)
      .then(function(env) {
        var types = [{id:type}].concat(env.result["/freebase/type_hints/included_types"]);
        q = {
          id: id,
          type: types.map(function(t) {
            return {id:t.id, connect:"insert"};
          })
        };
        return freebase.mqlwrite(q)
          .then(function(env) {
            var types = env.result.type.filter(function(t) {
              return t.connect === "inserted";
            });
            if (types.length) {
              return topic_api.topic(id, lang)
                .then(function(topic) {
                  return {
                    topic: topic,
                    types: types
                  };
                });
            }
            else {
              return {
                topic: null,
                types: null
              };
            }
          });
      })
      .then(function(topic_types) {
        return {
          html: acre.markup.stringify(components.add_type_result(id, topic_types, lang)),
          list: acre.markup.stringify(components.add_type_result_list(id, topic_types.types))
        };
      });
  }
};

