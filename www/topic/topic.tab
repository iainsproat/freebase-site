/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("lib/helper/helpers.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var filters = acre.require("lib/filter/filters.sjs");
var fh = acre.require("lib/filter/helpers.sjs");
var filter_queries = acre.require("lib/filter/queries.sjs");
var deferred = acre.require("lib/promise/deferred.sjs");
var topic_api = acre.require("lib/queries/topic.sjs");

var topic_filters = {
  limit: {
    validator: validators.Int,
    options: {if_empty:null}
  }
};

var SPEC = {

  template: "topic.mjt",

  validate: function(params) {
    return [
      params.object,
      (function() {
        var f = filters.validate(params, topic_filters);
        f[params.current_tab.key] = "";
        return f;
      })()
    ];
  },

  run: function(object, f) {
    var id = object.id;

    var promises = {
      id: id,
      filters: f,
      object: object,
      prop_counts: filter_queries.prop_counts_by_guid(object.guid),
      topic: topic_api.topic_structure(id, i18n.lang)
    };

    return deferred.all(promises)
      .then(function(result) {
          var topic = result.topic;
          if (topic) {
              result.notability = topic_api.get_notability(topic);
          }
          return result;
      });
  }
};
