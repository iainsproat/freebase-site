/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var queries = acre.require("queries");
var i18n = acre.require("lib/i18n/i18n.sjs");
var apis = acre.require("lib/promise/apis");
var freebase = apis.freebase;
var deferred = apis.deferred;
var sh = acre.require("helpers.sjs");

var SPEC = {

    template: "type.mjt",

    validate: function(params) {
        return [
            params.object
        ];
    },

    run: function(object) {
        var id = object.id;

        return sh.invalidate_schema_cache_maybe(id)
          .then(function(invalidated) {

            return queries.load_type(id, i18n.lang, {
                    instance_count: true
                })
                .then(function(type) {
                    var promises = {
                        domain: queries.incoming_from_domain(id, type.domain.id)
                            .then(function(props) {
                                return props || [];
                            }),
                        commons: queries.incoming_from_commons(id, type.domain.id, true)
                            .then(function(props) {
                                return props || 0;
                            }),
                        bases: queries.incoming_from_bases(id, type.domain.id, true)
                            .then(function(props) {
                                return props || 0;
                            })
                    };
                    if (type["/freebase/type_hints/enumeration"]) {
                        promises.instance = freebase.mqlread([{
                            id: null,
                            type: id,
                            optional: true,
                            limit: 11
                        }])
                        .then(function(env) {
                            if (env.result) {
                                var ids = env.result.map(function(n) {
                                    return n.id;
                                });
                                if (ids.length) {
                                    return queries.minimal_topic_multi(
                                        ids, i18n.lang);
                                }
                            }
                            return [];
                        });
                    }
                    return deferred.all(promises)
                        .then(function(r) {
                            h.extend(type, {
                                incoming: {
                                    domain: r.domain,
                                    commons: r.commons,
                                    bases: r.bases
                                }
                            }, {
                                instance: r.instance
                            });
                            return type;
                        });
                })
                .then(function(type) {
                    return {
                        object: object,
                        id: id,
                        type: type
                    };
                });

              });
    }
};
