/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

acre.require("mock")
    .playback(this, "./playback_proploader_load_paths.json");

var proploader = acre.require("lib/schema/proploader.sjs");
var assert_prop_path_schema = 
    acre.require("./helpers.sjs").assert_prop_path_schema;
var scope = this;

test("load_paths", function() {
  var result;
  var path = "/basketball/basketball_player/team./basketball/basketball_roster_position/number";
  proploader.load_paths([path])
    .then(function(props) {
      result = props;
    });
  acre.async.wait_on_results();
  ok(result, "Got load result");
  assert_prop_path_schema(scope, result, 
                          "/basketball/basketball_player/team", 
                          "/basketball/basketball_roster_position/number");
});

test("load_paths ignore nested (sub) mediator", function() {
    // ignore second proprty if mediator
    var paths = [
        "/basketball/basketball_roster_position/player.former_teams",
        "/basketball/basketball_player/position_s./basketball/basketball_position/player_roster_position"
    ];
    paths.forEach(function(path) {
        (function() {
             var result;
             proploader.load_paths([path])
                 .then(function(props) {
                     var first_prop = path.split(".")[0];
                     ok(props[first_prop]);
                     ok(!props[first_prop].expected_type.properties ||
                        props[first_prop].expected_type.properties.length === 0);
                 }, function(err) {
                     ok(false, err);
                 });
             acre.async.wait_on_results();
         })();
    });
        
});

test("load_paths multi", function() {
  var result;
  var paths = [
    "/basketball/basketball_player/team./basketball/basketball_roster_position/number",
    "/basketball/basketball_roster_position/player./sports/pro_athlete/career_start",
    "/sports/pro_athlete/sports_played_professionally"
  ];
  proploader.load_paths(paths)
    .then(function(props) {
      result = props;
    });
  acre.async.wait_on_results();
  ok(result, "Got load result");
  assert_prop_path_schema(scope, result,
                          "/basketball/basketball_player/team", [
                              "/basketball/basketball_roster_position/number"
                          ]);
  assert_prop_path_schema(scope, result, 
                          "/basketball/basketball_roster_position/player", [
                              "/sports/pro_athlete/career_start"
                          ]);
  assert_prop_path_schema(scope, result, 
                          "/sports/pro_athlete/sports_played_professionally", [
                              "/sports/pro_sports_played/athlete",
                              "/sports/pro_sports_played/sport",
                              "/sports/pro_sports_played/career_start",
                              "/sports/pro_sports_played/career_end"
                          ]);
});


test("load_paths relative", function() {
  var result;
  var path = "/sports/pro_sports_played/athlete.career_end";
  proploader.load_paths([path])
    .then(function(props) {
      result = props;
    });
  acre.async.wait_on_results();
  ok(result, "Got load result");
  assert_prop_path_schema(scope, result,
                          "/sports/pro_sports_played/athlete",
                          "/sports/pro_athlete/career_end");
});

test("load_paths relative multi", function() {
  var result;
  var paths = [
    "/basketball/basketball_player/position_s.players",
    "/basketball/basketball_player/player_statistics.fg_percentage",
    "/basketball/basketball_player/player_statistics.ft_percentage",
    "/sports/pro_athlete/sports_played_professionally"
  ];
  proploader.load_paths(paths)
    .then(function(props) {
      result = props;
    });
  acre.async.wait_on_results();
  ok(result, "Got load result");
  assert_prop_path_schema(scope, result, 
                          "/basketball/basketball_player/position_s", 
                          "/basketball/basketball_position/players");

  assert_prop_path_schema(scope, result, 
                          "/basketball/basketball_player/player_statistics", [
                              "/basketball/basketball_player_stats/fg_percentage", 
                              "/basketball/basketball_player_stats/ft_percentage"
                          ]);
  assert_prop_path_schema(scope, result, 
                          "/sports/pro_athlete/sports_played_professionally", [
                              "/sports/pro_sports_played/athlete",
                              "/sports/pro_sports_played/sport",
                              "/sports/pro_sports_played/career_start",
                              "/sports/pro_sports_played/career_end"
                          ]);
});


test("load_paths with emql", function() {
  var result;
  var paths = [
    "/people/person/age"
  ];
  proploader.load_paths(paths)
    .then(function(props) {
      result = props;
    });
  acre.async.wait_on_results();
  ok(result, "Got load result");
  assert_prop_path_schema(scope, result, "/people/person/age", []);
});
