/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * In order to successfully RUN this test, you must be
 *
 * logged in on *freebase.com
 *
 * AND
 *
 * If on devel url
 *   1. have permission on /base OR
 *   2. have local write_user as appeditoruser with the auth secrect
 */

acre.require("mock").playback(this, "./playback_delete_domain.json");

var apis = acre.require("lib/promise/apis.sjs");
var freebase = apis.freebase;
var deferred = apis.deferred;
var test_helpers = acre.require("helpers");
var delete_domain = acre.require("lib/schema/delete_domain").delete_domain;

// this test requires user to be logged in
var user;
test("login required", function() {
  freebase.get_user_info()
    .then(function(user_info) {
      user = user_info;
    });
  acre.async.wait_on_results();
  ok(user, "login required");
});
if (!user) {
  acre.test.report();
  acre.exit();
}

var user_domain = user.id + "/default_domain";

test("delete_domain no permission", function() {
  var result, error;
  delete_domain("/base/slamdunk", "/user/tfmorris", true)
    .then(function(info) {
      result = info;
    }, function(e) {
      error = e;
    });
  acre.async.wait_on_results();
  ok(!result, "expected error");
  ok(error, "expected error: " + error);
});

test("delete_domain user default_domain", function() {
  var result, error;
  delete_domain(user_domain, user.id, true)
    .then(function(info) {
      result = info;
    }, function(e) {
      error = e;
    });
  acre.async.wait_on_results();
  ok(!result, "expected error");
  ok(error, "expected error: " + error);
});

test("delete_domain commons domain", function() {
  var result, error;
  delete_domain("/freebase", user.id, true)
    .then(function(info) {
      result = info;
    }, function(e) {
      error = e;
    });
  acre.async.wait_on_results();
  ok(!result, "expected error");
  ok(error, "expected error: " + error);
});

function assert_deleted_result(result, domain) {
  [
    'types',
    'has_permission',
    'permitted:key',
    'not_permitted:key',
    'base:key'
  ].forEach(function(k) {
    ok(k in result, "Got delete_domain result: " + k);
  });

  var check_domain =
      acre.freebase.mqlread({guid:domain.guid, key:null, type:null}).result;

  equal(result.key, null, "key deleted");
  equal(result.type, null, "/type/domain deleted");

  return result;
};

test("delete_domain user domain", function() {
  var domain;
  test_helpers.create_domain2(user.id)
    .then(function(created) {
      domain = created;
    });
  acre.async.wait_on_results();
  ok(domain, "test domain created");

  var result;
  delete_domain(domain.mid, user.id)
    .then(function(deleted_info) {
      result = deleted_info;
    });
  acre.async.wait_on_results();
  ok(result, "got delete_domain_result");
  assert_deleted_result(result, domain);
 });

test("delete domain base domain", function() {
  var name = test_helpers.gen_test_name("test_base_");
  var key = name.toLowerCase();
  // create test base
  var domain;
  freebase.mqlread({
    guid: null,
    key: {namespace: "/base", value: key}
  })
  .then(function(env) {
    if (env.result) {
      return freebase.mqlwrite({
        guid: env.result.guid,
        key: {namespace: "/base", value: key, connect:"delete"},
        type: {id: "/type/domain", connect:"delete"}
      }, null, {http_sign: "keystore"});
    }
    else {
      return deferred.resolved({});
    }
  })
  .then(function(r) {
    h.enable_writeuser();
    return freebase.mqlwrite({
      id: null,
      guid: null,
      mid: null,
      name: name,
      key: {value:key, namespace:"/base"},
      type: {id: "/type/domain"},
      create: "unconditional"
    }, null, {http_sign: "keystore"})
    .then(function(env) {
      domain = env.result;
    });
  });
  acre.async.wait_on_results();
  ok(domain, "test domain created");

  var result;
  delete_domain(domain.mid, user.id)
    .then(function(deleted_info) {
      result = deleted_info;
    });
  acre.async.wait_on_results();
  ok(result, "got delete_domain_result");
  assert_deleted_result(result, domain);
});
