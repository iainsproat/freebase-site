/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var ph = acre.require("lib/propbox/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");

test("data_input_type", function() {
  var tests = [
  "/type/int", "int",
  "/type/float", "float",
  "/type/boolean", "boolean",
  "/type/rawstring", "rawstring",
  "/type/uri", "uri",
  "/type/text", "text",
  "/type/datetime", "datetime",
  "/type/id", "id",
  "/type/key", "key",
  "/type/value", "value",
  "/type/enumeration", "enumeration"
  ];
  for (var i=0,l=tests.length; i<l; i+=2) {
    same(ph.data_input_type(tests[i]), tests[i+1]);
  }
  same(ph.data_input_type(), "");
  same(ph.data_input_type(null), "");
  same(ph.data_input_type("/film/film"), "topic");
});

test("literal_validator", function() {
  var map = {
    "/type/datetime": validators.Datetime,
    "/type/int": validators.Int,
    "/type/float": validators.Float,
    "/type/boolean": validators.StringBool,
    "/type/uri": validators.Uri,
    "/type/enumeration": validators.MqlKey
  };
  ["/type/int",
  "/type/float",
  "/type/boolean",
  "/type/rawstring",
  "/type/uri",
  "/type/text",
  "/type/datetime",
  "/type/id",
  "/type/key",
  "/type/value",
  "/type/enumeration"].forEach(function(t) {
    if (map[t]) {
      strictEqual(ph.literal_validator(t), map[t]);
    }
    else {
      strictEqual(ph.literal_validator(t), validators.String);
    }
  });
});

test("mqlread_clause", function() {
  // /type/text
  var prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/type/text"
    }
  };
  same(ph.mqlread_clause(prop_structure, null, "/lang/ko"), [{
    value: null,
    lang: null,
    "lang|=": ["/lang/ko", "/lang/en"],
    optional: true,
    link: {creator:null}
  }]);
  same(ph.mqlread_clause(prop_structure, "korean name", "/lang/ko"), [{
    value: "korean name",
    lang: null,
    "lang|=": ["/lang/ko", "/lang/en"],
    optional: true,
    link: {creator:null}
  }]);

  // /type/boolean
  prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/type/boolean"
    },
    unique: true
  };
  same(ph.mqlread_clause(prop_structure, null, "/lang/ko"), [{
    value: null,
    optional: true,
    link: {creator:null}
  }]);
  same(ph.mqlread_clause(prop_structure, false, "/lang/ko"), [{
    value: false,
    optional: true,
    link: {creator:null}
  }]);

  //type/int
  prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/type/int"
    }
  };
  same(ph.mqlread_clause(prop_structure, null, "/lang/ko"), [{
    value: null,
    optional: true,
    link: {creator:null}
  }]);
  same(ph.mqlread_clause(prop_structure, 0, "/lang/ko"), [{
    value: 0,
    optional: true,
    link: {creator:null}
  }]);

  // topic
  prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/some/type"
    }
  };
  same(ph.mqlread_clause(prop_structure, null, "/lang/en"), [{
    id: null,
    name: [{
      value: null,
      lang: null,
      "lang|=": ["/lang/en"],
      optional: true
    }],
    optional: true,
    link: {creator:null}
  }]);

  // mediator
  prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/some/mediator",
      mediator: true
    },
    properties: [{
      id: "/subprop/1",
      expected_type: {
        id: "/type/text"
      }
    }, {
      id: "/subprop/2",
      expected_type: {
        id: "/some/type2"
      }
    }]
  };
  same(ph.mqlread_clause(prop_structure, null, "/lang/zh"), [{
    id: null,
    optional: true,
    link: {creator:null}
  }]);
});

test("mqlread_query", function() {
  // /mediator
  var prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/some/mediator",
      mediator: true
    },
    properties: [{
      id: "/subprop/1",
      expected_type: {
        id: "/type/text"
      }
    }, {
      id: "/subprop/2",
      expected_type: {
        id: "/some/type2"
      }
    }]
  };
  same(ph.mqlread_query("/en/foo", prop_structure, null, "/lang/iw"), {
    id: "/en/foo",
    "/prop/id": [{
      id: null,
      optional: true,
      link: {creator:null},
      "/subprop/1": [{
        value: null,
        lang: null,
        "lang|=": ["/lang/iw", "/lang/en"],
        optional: true,
        link: {creator:null}
      }],
      "/subprop/2": [{
        id: null,
        name: [{
          value: null,
          lang: null,
          "lang|=": ["/lang/iw", "/lang/en"],
          optional: true
        }],
        optional: true,
        link: {creator:null}
      }]
    }]
  });
  same(ph.mqlread_query("/en/foo", prop_structure, "/m/123", "/lang/iw"), {
    id: "/en/foo",
    "/prop/id": [{
      id: "/m/123",
      optional: true,
      link: {creator:null},
      "/subprop/1": [{
        value: null,
        lang: null,
        "lang|=": ["/lang/iw", "/lang/en"],
        optional: true,
        link: {creator:null}
      }],
      "/subprop/2": [{
        id: null,
        name: [{
          value: null,
          lang: null,
          "lang|=": ["/lang/iw", "/lang/en"],
          optional: true
        }],
        optional: true,
        link: {creator:null}
      }]
    }]
  });


  // deep property
  prop_structure = {
    id: "/prop/id",
    expected_type: {
      id: "/some/type"
    },
    properties: [{
      id: "/subprop/1",
      expected_type: {
        id: "/type/text"
      }
    }, {
      id: "/subprop/2",
      expected_type: {
        id: "/some/type2"
      },
      properties: [{
        id: "/deep/1",
        expected_type: {
          id: "/type/float"
        }
      }]
    }]
  };
  same(ph.mqlread_query("/en/foo", prop_structure, null, "/lang/en"), {
    id: "/en/foo",
    "/prop/id": [{
      id: null,
      link: {creator:null},
      name: [{
        value: null,
        lang: null,
        "lang|=": ["/lang/en"],
        optional: true
      }],
      optional: true,
      "/subprop/1": [{
        value: null,
        lang: null,
        "lang|=": ["/lang/en"],
        optional: true,
        link: {creator:null}
      }],
      "/subprop/2": [{
        id: null,
        name: [{
          value: null,
          lang: null,
          "lang|=": ["/lang/en"],
          optional: true
        }],
        optional: true,
        "/deep/1": [{
          value: null,
          optional: true,
          link: {creator:null}
        }],
        link: {creator:null}
      }]
    }]
  });
});


test("minimal_prop_value", function() {
  // topic
  var prop_structure = {
    id: "/some/prop/id",
    expected_type: {
      id: "/some/type/id"
    }
  };

  same(ph.minimal_prop_value(prop_structure, null, "/lang/en"), null);

  var prop_data = {
    id: "/some/topic/id",
    name: [{value:"ko name", lang:"/lang/ko"},{value:"en name", lang:"/lang/en"}]
  };
  same(ph.minimal_prop_value(prop_structure, prop_data, "/lang/ko"), {
    id: "/some/topic/id",
    text: "ko name",
    lang: "/lang/ko"
  });
  same(ph.minimal_prop_value(prop_structure, prop_data, "/lang/en"), {
    id: "/some/topic/id",
    text: "en name",
    lang: "/lang/en"
  });

  prop_data = {
    id: "/some/topic/id"
  };
  same(ph.minimal_prop_value(prop_structure, prop_data, "/lang/en"), {
    id: "/some/topic/id",
    text: "/some/topic/id"
  });

  prop_structure = {
    id: "/some/prop/id",
    expected_type: {
      id: "/type/text"
    }
  };
  prop_data = {
    value: "ko value",
    lang: "/lang/ko"
  };
  same(ph.minimal_prop_value(prop_structure, prop_data, "/lang/ko"), {
    value: "ko value",
    text: "ko value",
    lang: "/lang/ko"
  });

  prop_structure = {
    id: "/some/prop/id",
    expected_type: {
      id: "/type/int"
    }
  };
  prop_data = {
    value: 0
  };
  same(ph.minimal_prop_value(prop_structure, prop_data, "/lang/ko"), {
    value: 0,
    text: "0"
  });

  same(ph.minimal_prop_value(
    prop_structure,
    {
      value:0, link:{creator:'/user/foo'}
    },
    null), {
      value: 0,
      text: '0',
      creator: '/user/foo'
    });
});


test('property_requires_permission_or_authorities', function() {
  ok(ph.property_requires_permission_or_authorities(
       {requires_permission:true}));
  ok(!ph.property_requires_permission_or_authorities({}));
  ok(!ph.property_requires_permission_or_authorities({requres_permssion:null}));
  ok(!ph.property_requires_permission_or_authorities(
       {requres_permssion:false}));

  ok(!ph.property_requires_permission_or_authorities({authorities:null}));
  ok(!ph.property_requires_permission_or_authorities({authorities:{}}));
  ok(!ph.property_requires_permission_or_authorities({authorities:{members:{}}}));
  ok(ph.property_requires_permission_or_authorities(
       {authorities:{members:{'/user/foo':1}}}));
});

test('is_authority', function() {
  same(ph.is_authority({}, '/user/foo'), false);
  same(ph.is_authority(
      {requires_permission:true}, '/user/foo'), false);
  same(ph.is_authority(
      {authorities:{}}, '/user/foo'), false);
  same(ph.is_authority(
      {authorities:{members:{}}}, '/user/foo'), false);
  same(ph.is_authority(
      {authorities:{members:{'/user/bar':1}}}, '/user/foo'), false);
  same(ph.is_authority(
      {authorities:{members:{'/user/foo':1}}}, '/user/foo'),
      true);
});

test('get_propbox_data_row_css_class', function() {
  var DEFAULT_CSS = 'kbs data-row';
  var c = ph.get_propbox_data_row_css_class({}, {});
  same(c, DEFAULT_CSS, c);

  c = ph.get_propbox_data_row_css_class({requires_permission:true}, {});
  ok(c.indexOf('data-row-requires-permission') != -1, c);
  ok(c.indexOf('data-row-creator-') == -1, c);

  c = ph.get_propbox_data_row_css_class(
      {authorities:{members:{}}}, {creator:'/user/foo'});
  same(c, DEFAULT_CSS, c);

  c = ph.get_propbox_data_row_css_class(
      {authorities:{members:{'/user/bar':1}}}, {creator:'/user/foo'});
  ok(c.indexOf('data-row-requires-permission') != -1, c);
  ok(c.indexOf('data-row-creator-') == -1, c);

  c = ph.get_propbox_data_row_css_class(
      {authorities:{members:{'/user/foo':1}}}, {creator:'/user/foo'});
  ok(c.indexOf('data-row-requires-permission') != -1, c);
  ok(c.indexOf('data-row-creator-foo') != -1, c);

});


function mock_prop_structure(authorities, requires_permission) {
  return {
    requires_permission: requires_permission === true,
    authorities: authorities ? authorities : null
  };
};

function mock_authorities(user_id) {
  var members = {};
  members[user_id] = h.id_key(user_id);
  return {
    members: members
  };
};


test('user_can_add', function() {
  same(ph.user_can_add('/user/daepark', mock_prop_structure(null, true)),
       false, 'authorities=null, requires_permission=true');

  same(ph.user_can_add('/user/daepark', mock_prop_structure(null, false)),
       true, 'authorities=null, requires_permission=false');

  var authorities = mock_authorities('/user/daepark');

  same(ph.user_can_add('/user/daepark', mock_prop_structure(authorities, true)),
       true, 'authorities=foo, requires_permission=true');

  same(ph.user_can_add(
         '/user/masouras', mock_prop_structure(authorities, true)),
       false, 'authorities=foo, requires_permission=true');

  same(ph.user_can_add(
         '/user/daepark', mock_prop_structure(authorities, false)),
       true, 'authorities=foo, requires_permission=true');

  same(ph.user_can_add(
         '/user/masouras', mock_prop_structure(authorities, false)),
       true, 'authorities=foo, requires_permission=true');
});

test('user_can_edit', function() {
  same(ph.user_can_edit('/user/daepark', mock_prop_structure(null, true), {
                         'creator': '/user/daepark'
                       }),
       false, 'authorities=null, requires_permission=true');

  same(ph.user_can_edit('/user/daepark', mock_prop_structure(null, false), {
                         'creator': '/user/masouras'
                       }),
       true, 'authorities=null, requires_permission=false');

  var authorities = mock_authorities('/user/daepark');

  same(ph.user_can_edit('/user/daepark',
                       mock_prop_structure(authorities, true), {
                         'creator': '/user/daepark'
                       }),
       true, 'authorities=foo, requires_permission=true');

  same(ph.user_can_edit('/user/daepark',
                       mock_prop_structure(authorities, true), {
                         'creator': '/user/masouras'
                       }),
       true, 'authorities=foo, requires_permission=true');

  same(ph.user_can_edit('/user/masouras',
                       mock_prop_structure(authorities, true), {
                         'creator': '/user/daepark'
                       }),
       false, 'authorities=foo, requires_permission=true');

  same(ph.user_can_edit('/user/masouras',
                       mock_prop_structure(authorities, true), {
                         'creator': '/user/masouras'
                       }),
       false, 'authorities=foo, requires_permission=true');

  same(ph.user_can_edit('/user/daepark',
                       mock_prop_structure(authorities, false), {
                         'creator': '/user/daepark'
                       }),
       true, 'authorities=foo, requires_permission=false');

  same(ph.user_can_edit('/user/daepark',
                       mock_prop_structure(authorities, false), {
                         'creator': '/user/masouras'
                       }),
       false, 'authorities=foo, requires_permission=false');

  same(ph.user_can_edit('/user/masouras',
                       mock_prop_structure(authorities, false), {
                         'creator': '/user/daepark'
                       }),
       false, 'authorities=foo, requires_permission=false');

  same(ph.user_can_edit('/user/masouras',
                       mock_prop_structure(authorities, false), {
                         'creator': '/user/masouras'
                       }),
       true, 'authorities=foo, requires_permission=false');

});
