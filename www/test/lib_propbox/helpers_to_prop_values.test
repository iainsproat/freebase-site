/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

acre.require("mock")
    .playback(this, "./playback_helpers_to_prop_values.json");

var h = acre.require("lib/helper/helpers.sjs");
var ph = acre.require("lib/propbox/helpers.sjs");
var queries = acre.require("lib/propbox/queries.sjs");
var topic_api = acre.require("lib/queries/topic.sjs");

function decorate_value(value, from_value) {
  ["text", "uri", "lang"].forEach(function(k) {
    if (k in from_value) {
      value[k] = from_value[k];
    }
  });
  if (value.id && from_value.id) {
    // topic api returns mids
    value.id = from_value.id;
  }
};


test("to_prop_values", function() {
  var topic;  // topic data from topic api
  topic_api.topic_structure("/en/kaede_rukawa", {domain:"all"})
    .then(function(t) {
      topic = t;
    });
  acre.async.wait_on_results();
  ok(topic, "Got topic");

  function test_values(structure, prop_data, expected, lang) {
    var values = ph.to_prop_values(structure, prop_data, lang);
    equal(values.length, expected.length);
    values.forEach(function(value, i) {
      var expected_value = expected[i];
      decorate_value(value, expected_value);
      if (structure.properties && value.property) {
        structure.properties.forEach(function(substructure) {
          var subprop1 = value.property[substructure.id];
          var subprop2 =  expected_value.property[substructure.id];
          if (! (subprop1 || subprop2)) {
            return;
          }
          for (var k in subprop2) {
            if (k !== "values") {
              subprop1[k] = subprop2[k];
            }
          }
          if (subprop1.values) {
            equal(subprop1.values.length, subprop2.values.length);
            subprop1.values.forEach(function(subvalue, k) {
              delete subvalue.property;
              decorate_value(subvalue, subprop2.values[k]);
            });
          }
        });
      }
    });
    same(values, expected);
  };

  [
    "/base/slamdunk/player/number",
    // cvt
    "/fictional_universe/fictional_character/romantically_involved_with"
  ].forEach(function(pid) {
    (function() {
      var structure, prop_data, expected;
      queries.prop_data("/en/kaede_rukawa", pid, null, "/lang/en")
        .then(function(data) {
           prop_data = data;
        });
      acre.async.wait_on_results();

      structure = topic.structure.properties[pid];

      expected = topic.property[pid];
      if (expected) {
          expected = expected.values;
      }
      else {
          expected = [];
      }
      test_values(structure, prop_data, expected, "/lang/en");
    })();
  });
});
