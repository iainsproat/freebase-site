/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

acre.require("mock")
    .playback(this, "./playback_queries_get_enumerated_types.json");

var h = acre.require("lib/helper/helpers.sjs");
var queries = acre.require("lib/propbox/queries.sjs");

test("get_enumerated_types", function() {
  var pid = "/basketball/basketball_player/position_s";
  var structure;
  queries.prop_structure(pid, "/lang/en")
    .then(function(s) {
      structure = s;
    });
  acre.async.wait_on_results();

  var positions;
  queries.get_enumerated_types(pid, "/lang/en")
    .then(function(s) {
      positions = h.first_element(s).expected_type.instances;
    });
  acre.async.wait_on_results();
  ok(positions && positions.length, "Got positions");
  var positions_map = h.map_array(positions, "id");
  ok(positions_map["/en/center"], "Got gender /en/center");
  ok(positions_map["/en/power_forward"], "Got gender /en/power_forward");

  // should get the same data if we already have prop structure
  var positions2;
  queries.get_enumerated_types(structure, "/lang/en")
    .then(function(s) {
      positions2 = h.first_element(s).expected_type.instances;
    });
  acre.async.wait_on_results();
  same(positions2, positions);
});


test("get_enumerated_types for mediator", function() {
  var pid = "/basketball/basketball_player/team";
  var structure;
  queries.get_enumerated_types(pid, "/lang/en")
    .then(function(s) {
      structure = h.first_element(s);
    });
  acre.async.wait_on_results();
  var positions;
  structure.properties.every(function(p) {
    if (p.id === "/basketball/basketball_roster_position/position") {
      positions = p.expected_type.instances;
      return false;
    }
    return true;
  });
  ok(positions && positions.length, "Got basketball positions");
  var positions_map = h.map_array(positions, "id");
  ok(positions_map["/en/point_guard"]);
});
