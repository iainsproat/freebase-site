/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

acre.require("mock").playback(this, "./playback_queries.json");

var ht = acre.require("./helpers.sjs");
var q = acre.require("label/schema/queries");
var mql = acre.require("label/schema/mql");

var self = this;

test("load_domain", function() {
    var result;
    q.load_domain("/film", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film", "Got domain");
});

test("load_domain types", function() {
    var result;
    q.load_domain("/film", "/lang/en", {types:true})
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film", "Got domain");
    ok(result.types, "Got domain types");
});

test("load_type",
    {bug: "Skip mock/record can't handle updates to schema loader results"},
    function() {
    var result;
    q.load_type("/film/film", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film/film", "Got type");
});

test("load_type properties and articles",
    {bug: "Skip mock/record can't handle updates to schema loader results"},
    function() {
    var result;
    q.load_type("/film/film", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film/film", "Got type");
    ok(result["/common/topic/description"]);
    result.properties.every(function(p) {
        if (p.id === "/film/film/initial_release_date") {
            ok(p["/common/topic/description"], "Got property tip for /film/film/initial_release_date");
            return false;
        }
        return true;
    });
});

test("load_property",
     {bug: "Skip mock/record can't handle updates to schema loader results"},
     function() {
    var result;
    q.load_property("/film/film/initial_release_date", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film/film/initial_release_date", "Got type");
    ok(!result["/freebase/documented_object/tip"]);
});

test("load_property article",
     {bug: "Skip mock/record can't handle updates to schema loader results"},
     function() {
    var result;
    q.load_property("/film/film/initial_release_date", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/film/film/initial_release_date", "Got type");
    ok(result["/common/topic/description"]);
});

test("minimal_topic", function() {
    var result;
    q.minimal_topic("/m/045c7b", "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();
    ok(result && result.id === "/m/045c7b", "Got topic");
    ok(result.name);
});

test("minimal_topic_multi", function() {
    var result;
    q.minimal_topic_multi(["/m/045c7b", "/m/0k8z"], "/lang/en")
        .then(function(r) {
            result = r;
        });
    acre.async.wait_on_results();


    ok(result, "Got mutli topic result");
    equal(result.length, 2);
    equal(result[0].id, "/m/045c7b");
    equal(result[1].id, "/m/0k8z");
});
