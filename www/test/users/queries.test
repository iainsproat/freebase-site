/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var q = acre.require("label/users/queries.sjs");
var object_query = acre.require("lib/queries/object.sjs");

acre.require("lib/test/mock").playback(this, "./playback_queries.json");

function get_object(id) {
    var d = object_query.object(id)
    .then(function(obj) {
      o = obj;
    });
};

test("app", function() {
  var type = "/freebase/apps/acre_app";
  var groups;
  object_query.object("/user/jdouglas/acre")
    .then(function(obj) {
      return q.permission_usergroups(obj.permission.id, type)
        .then(function(r) {
          groups = r;
        });
    });
  acre.async.wait_on_results();
  ok(h.isArray(groups) && groups.length, "Got usergroups");
  var users = h.map_array(groups[0]["users"], "id");
  var user = users["/user/jdouglas"];
  ok(user, "Got user jdouglas");
  ok(user.groups[0].type == type, "Got correct type");
});

test("domain", function() {
  var type = "/freebase/domain_profile";
  var groups;
  object_query.object("/film")
    .then(function(obj) {
      return q.permission_usergroups(obj.permission.id, type)
        .then(function(r) {
          groups = r;
        });
    });
  acre.async.wait_on_results();
  ok(h.isArray(groups) && groups.length, "Got usergroups");
  var users = h.map_array(groups[0]["users"], "id");
  var user = users["/user/jon"];
  ok(user, "Got user jon");
  ok(user.groups[0].type == type, "Got correct type");
});

test("usergroup", function() {
  var groups;
  q.usergroup("/boot/schema_group", "/type/usergroup")
    .then(function(r) {
      groups = r;
    });
  acre.async.wait_on_results();
  ok(h.isArray(groups) && groups.length, "Got usergroups");
  var users = h.map_array(groups[0]["users"], "id");
  var user = users["/user/superalecf"];
  ok(user, "Got user superalecf");
});
