/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("validator/validators.sjs");
var i18n = acre.require("i18n/i18n.sjs");
var editcomponents = acre.require("i18n/editcomponents.mjt");
var promise_apis = acre.require("promise/apis.sjs");
var text_lang_sort = acre.require("queries/object.sjs").text_lang_sort;
var freebase = promise_apis.freebase;
var deferred = promise_apis.deferred;

var SPEC = {

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "s", {required:true}),    // subject/topic id
      validators.MqlId(params, "p", {required:true}),    // predicate/property id
      validators.LangId(params, "lang", {required:true}) // lang
    ];
  },

  run: function(s, p, lang) {
    var promises = [];
    promises.push(prop_query(p, lang));
    promises.push(values_query(s, p, lang));
    return deferred.all(promises)
      .then(function([prop, values]) {
        // TODO: assert prop
        return {
          html: acre.markup.stringify(editcomponents.text_edit_form(prop, values))
        };
      });
  }
};

function prop_query(p, lang) {
  return freebase.mqlread({
    id: p,
    name: i18n.mql.text_clause(lang),
    type: "/type/property",
    unique: null,
    expected_type: "/type/text"
  })
  .then(function(env) {
    return env.result;
  });
}

function values_query(s, p, lang) {

  return freebase.mqlread([{
    optional: true,
    type: "/type/link",
    source: {id: s},
    master_property: p,
    target_value: {}
  }])
  .then(function(env) {
    return env.result;
  })
  .then(function(result) {
    var values = result.map(function(link) {return link.target_value;});
    return values.sort(text_lang_sort);
  });
};
