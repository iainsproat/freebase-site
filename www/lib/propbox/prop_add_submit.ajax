/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");
var propbox = acre.require("propbox/propbox.mjt");
var queries = acre.require("propbox/queries.sjs");
var ph = acre.require("propbox/helpers.sjs");
var promise_apis = acre.require("promise/apis.sjs");
var freebase = promise_apis.freebase;
var deferred = promise_apis.deferred;

/**
 * prop add form
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    var args = [
      validators.MqlId(params, "s", {required:true}),            // subject id
      validators.MqlId(params, "p", {required:true}),            // property id
      validators.LangId(params, "lang", {if_empty:"/lang/en"}),  // lang
      params
    ];

    return args;
  },

  run: function(s, p, lang, params) {
    /**
     * TODO: permission check? (lib/permission/queries.has_permission)
     */
    return queries.prop_structure(p, lang)
      .then(function(prop_structure) {
        // construct mqlwrite query
        var q = ph.mqlwrite_query(s, prop_structure, params, lang);
        // mqlwrite
        return freebase.mqlwrite(q)
          .then(function(env) {
            // TODO: handle error
            return env.result;
          })
          .then(function(result) {
            // get the id or value just added
            var data = h.first_element(result[p]);
            // query to get the full prop_data to get the names (lang) and subproperties (mediators)
            return queries.prop_data(s, prop_structure, data.id != null ? data.id : data.value, lang);
          })
          .then(function(prop_data) {
            // convert mql result to topic api structure values
            var data = ph.to_prop_values(prop_structure, prop_data[p], lang);
            data = h.first_element(data);
            var new_row;
            if (prop_structure.expected_type.mediator) {
              // output table row (<tr>) if mediator
              new_row = propbox.datatable_row({id: s}, prop_structure, data, lang);
            }
            else {
              // output list row (<li>) for everything else
              new_row = propbox.datalist_row({id: s}, prop_structure, data, lang);
            }
            return {
              mqlwrite: q,
              prop_structure: prop_structure,
              prop_data: prop_data,
              prop_value: data,
              // everything up to here is for debugging
              html: acre.markup.stringify(new_row)
            };
          });
      });
  }
};
