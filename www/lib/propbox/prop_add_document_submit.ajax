/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");
var propbox = acre.require("propbox/propbox.mjt");
var queries = acre.require("propbox/queries.sjs");
var ph = acre.require("propbox/helpers.sjs");
var promise_apis = acre.require("promise/apis.sjs");
var freebase = promise_apis.freebase;
var deferred = promise_apis.deferred;
var create_article = acre.require("queries/create_article.sjs").create_article;
var update_article = acre.require("queries/update_article.sjs").update_article;
var proploader = acre.require("schema/proploader.sjs");

/**
 * prop add/edit document
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    var args = [
      validators.MqlId(params, "topic", {required:true}),      // topic id
      validators.MqlId(params, "property", {required:true}),   // property id
      validators.String(params, "content", {required:true}),   // article content    
      validators.MqlId(params, "document", {if_empty:null}),   // if replacing or editing existing article, 
                                                               // this is the id of the /common/document node
      validators.LangId(params, "lang", {if_empty:"/lang/en"})// lang
    ];
    return args;
  },

  run: function(topic, property, content, document, lang) {
    return proploader.load(property)
      .then(function(result) {
        return result[property];
      })
      .then(function(prop) {
        var promise;
        if (document) {
            promise = update_article(content, "text/html", {
                article: document,
                topic: topic,
                lang: lang
            });
        }
        else {
            promise = create_article(content, "text/html", {
                topic: topic,
                lang: lang,
                prop: prop
            })
            .then(function(doc) {
                return doc.id;
            });
        }
        return promise
          .then(function(document_id) {
              return freebase.get_blob(document_id, "html")
                  .then(function(blob) {
                      return blob.body;
                  })
                  .then(function(body) {
                      return {
                          html: acre.markup.stringify(propbox.datalist_row({id:topic}, 
                              prop, {text:body, id:document_id}, lang))
                      };
                  });
          });
      });
  }
};
