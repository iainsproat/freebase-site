/*
 * Copyright 2011, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
var validators = acre.require("validator/validators.sjs");
var apis = acre.require("promise/apis.sjs");
var urlfetch = apis.urlfetch;

var SPEC = {

  method: "GET",

  auth: false,

  cache_policy: "public",

  validate: function(params) {
    return [
      validators.Json(params, "query", {required: true, json: false}),
      validators.String(params, "service", {if_empty: false}),
      validators.StringBoolean(params, "extended", {if_empty: false}),
      validators.StringBoolean(params, "emql", {if_empty: false}),
      validators.StringBoolean(params, "debug", {if_empty: false})
    ];
  },

  run: function(query, service, extended, emql, debug) {
    var clientIP = acre.request.headers["x-client-ip"] || "";
    var url = acre.freebase.service_url + "/api/service/mqlread";
    var form = {
      query: query
    };

    // test emql server is a special case
    if (emql) {
      form.indent = 1;
      if (debug) form.debug = 1;
      url = acre.form.build_url("http://search.labs.freebase.com/api/service/emql", form);
      return urlfetch(url).then(format_response);
    }
    
    if (service) {
      url = (service.indexOf("/") != -1) ? service : "http://" + service + "/api/service/mqlread";
    }

    if (extended) form.extended = 1;
    
    var options = {
      'method': "POST",
      'bless': true,
      'content': acre.form.encode(form),
      'headers': {
        'User-Agent' : 'Freebase ACRE',
        'Content-type' : 'application/x-www-form-urlencoded',
        'X-Client-IP' : clientIP
      }
    };

    return urlfetch(url, options).then(format_response);
    
    function format_response(response) {
      var headers = {};
      for (var key in response.headers) {
        headers[key.toLowerCase()] = response.headers[key];
      }
      
      return {
        "headers": headers,
        "serviceUrl": url,
        "clientIP": clientIP,
        "body": JSON.parse(response.body)
      };      
    };
  }
};