/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");
var propbox = acre.require("propbox/propbox.mjt");
var queries = acre.require("propbox/queries.sjs");
var deferred = acre.require("promise/deferred.sjs");
var collection = acre.require("collection/collection.mjt");


var IGNORE_PROPS = {
  "/type/object/name": 1,
  "/common/topic/image": 1,
  "/common/topic/article": 1
};


/**
 * prop add form
 */
var SPEC = {

  method: "GET",

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "s", {required:true}),           // the row/topic id
      validators.MultiValue(params, "p", {validator:validators.MqlId, required:true}), // prop ids (columns)
      validators.LangId(params, "lang", {if_empty:"/lang/en"}),  // lang id
      validators.StringBool(params, "nav", {if_empty:false})  // only output modal-inner contents
    ];
  },

  run: function(s, p, lang, nav) {
    p = p.filter(function(pid) {
      return !IGNORE_PROPS[pid];
    });

    if (!p.length) {
      return {
        html: acre.markup.stringify(collection.row_edit_form(s, [], [], lang, nav))
      };
    }

    return queries.prop_structures.apply(null, p.concat(lang))
      .then(function(prop_structures) {
        var promises = [];
        prop_structures.forEach(function(prop_structure) {
          promises.push(queries.prop_values(s, prop_structure, null, lang));
        });
        return deferred.all(promises)
          .then(function(prop_values) {
            prop_structures.forEach(function(prop_structure, i) {
              prop_structure.values = prop_values[i];
              // TODO: support deep properties
              // for now, splice deep properties out of prop_structures
              if (!prop_structure.expected_type.mediator) {
                delete prop_structure.properties;
              }
            });
            // TODO: assert prop_structures.length === prop_values.length
            return {
              // <debug>
              prop_structures: prop_structures,
              prop_values: prop_values,
              // </debug>
              html: acre.markup.stringify(collection.row_edit_form(s, prop_structures, prop_values, lang, nav))
            };
          });
      });
  }
};
