/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("lib/validator/validators.sjs");
var queries = acre.require("queries.sjs");
var editcomponents = acre.require("type_editcomponents.mjt");
var deferred = acre.require("lib/promise/deferred.sjs");

/**
 * domain settings form
 */
var SPEC = {

  method: "GET",

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "id", {required:true})    // type id
    ];
  },

  run: function(id) {
    var promises = [];
    promises.push(queries.minimal_type(id));
    promises.push(queries.type_used(id));
    return deferred.all(promises)
      .then(function(result) {
        var type = result[0];
        type.used = result[1];
        return type;
      })
      .then(function(type) {
        // choose the best key
        var key = type.key[0];
        for (var i=0,l=type.key.length; i<l; i++) {
          var k = type.key[i];
          if (k.namespace === type.domain.id) {
            key = k;
            break;
          }
        }
        type.key = key;
        return {
          html: acre.markup.stringify(editcomponents.type_settings_form(type))
        };
      });
  }

};
