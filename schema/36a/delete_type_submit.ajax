/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("lib/helper/helpers.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var delete_type = acre.require("delete_type.sjs").delete_type;
var editcomponents = acre.require("domain_editcomponents.mjt");

/**
 * delete type
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "id", {required:true}),            // type to delete
      validators.MqlId(params, "user", {required:true}),          // user performing the delete
      validators.StringBool(params, "dry_run", {if_empty:false}), // dry run to see what will be deleted
      validators.StringBool(params, "force", {if_empty:true}),    // force delete if "used"

      validators.StringBool(params, "redirect", {if_empty:false})  // if true redirect to type domain after delete
    ];
  },

  run: function(id, user, dry_run, force, redirect) {
    return delete_type(id, user, dry_run, force)
      .then(function([type_info, result]) {
        if (redirect) {
          return {
            location: h.fb_url("/schema", type_info.domain.id)
          };
        }
        else {
          return {
            html: acre.markup.stringify(editcomponents.delete_type_result(type_info))
          };
        }
      });
  }
};
