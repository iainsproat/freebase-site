/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("lib/validator/validators.sjs");
var queries = acre.require("queries.sjs");
var editcomponents = acre.require("domain_editcomponents.mjt");
var freebase = acre.require("lib/promise/apis.sjs").freebase;

/**
 * domain settings form
 */
var SPEC = {

  method: "GET",

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, "id", {required:true}),    // domain id
      params.auth_user
    ];
  },

  run: function(id, user) {
    return queries.minimal_domain(id)
      .then(function(domain) {
        // choose the best key
        var key = domain.key[0];
        for (var i=0,l=domain.key.length; i<l; i++) {
          var k = domain.key[i];
          if ((k.namespace + "/" + k.value) ===  id) {
            key = k;
            break;
          }
        }
        domain.key = key;

        // does the user have permission to change the key?
        var q = {
          id: key.namespace,
          permission: [{permits: [{member: {id: user.id}}]}]
        };
        return freebase.mqlread(q)
          .then(function(env) {
              if (env.result) {
                domain.key.permitted = true;
              }
              return domain;
            });
      })
      .then(function(domain) {
        return {
          html: acre.markup.stringify(editcomponents.domain_settings_form(domain))
        };
      });
  }

};
