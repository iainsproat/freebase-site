<!!--
 Copyright 2010, Google Inc.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:

     * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above
 copyright notice, this list of conditions and the following disclaimer
 in the documentation and/or other materials provided with the
 distribution.
     * Neither the name of Google Inc. nor the names of its
 contributors may be used to endorse or promote products derived from
 this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 !!-->

<acre:script>
  var mf = acre.require("MANIFEST").mf;
  var h = mf.require("core", "helpers");
  var sh = mf.require("helpers");
  var i18n = mf.require("i18n", "i18n");
  var _ = i18n.gettext;

  var previous = null;
  var previous_global = null;  
</acre:script>

<acre:block def="type_property_row(prop, type_id)">
  <tr class="hoverable">
    <th scope="row" class="row-header odd">
      <a href="${h.url_for('schema', null, null, prop.id)}">${i18n.display_name(prop)}</a>
      <a href="javascript:void(0);" class="row-menu-trigger">+</a>
      <ul class="row-menu tooltip">
        <li class="row-menu-item edit">
          <a href="#" class="icon-link" onclick="return freebase.dispatch(event, freebase.schema.type.edit_property, ['${prop.id}'], this);"><span class="edit-icon">${_('Edit property')}</span></a>
        </li>
        <li class="row-menu-item edit">
          <a href="#" class="icon-link" onclick="return freebase.dispatch(event, freebase.schema.type.delete_property, ['${prop.id}'], this);"><span class="delete-icon">${_('Delete property')}</span></a>
        </li>
        <li class="row-menu-item"><a href="${h.url_for('triples', null, null, prop.id)}">${_('Inspect Property')}</a></li>
        <li class="row-menu-item" acre:if="prop.expected_type && prop.expected_type.id.indexOf('/type') === -1">
          <a href="${h.freebase_url('/view'+prop.expected_type.id)}">${_('Browse instances')}</a>
        </li>
        <li class="row-menu-item last">
          <a href="${sh.build_query_url(type_id, prop.id)}">${_('Build query')}</a>
        </li>
      </ul>
    </th>
    <td class="even">$prop.id</td>
    <td class="odd">
      <acre:block if="prop.expected_type">
        <a href="${h.url_for('schema', null, null, prop.expected_type.id)}">
          $prop.expected_type.id
        </a>
        <acre:script>
          var other_property = prop.master_property || prop.reverse_property;
        </acre:script>
        <acre:block if="other_property">
          <span class="return-link-trigger"></span>
          <span class="return-link-description">
            ${h.bless_sprintf(_("%s has a return link of %s from %s"), h.tag("strong", i18n.display_name(prop)), h.tag("strong", i18n.display_name(other_property)), h.tag("strong", i18n.display_name(other_property.schema)))}
            <span class="return-link-pointer"></span>
          </span>        
        </acre:block>
        <acre:block if="prop.expected_type.mediator">
          <span class="property-meta ect-role"><abbr title="${_('This is a Mediator')}">${_('mediator')}</abbr></span>
        </acre:block>
        <acre:block if="prop.expected_type.enumeration">
          <span class="property-meta ect-role"><abbr title="${_('This is an Enumerated Type')}">${_('enumerated')}</abbr></span>
        </acre:block>      
        <acre:block if="prop.expected_type.id === '/type/enumeration' && prop.enumeration">
          <span class="property-meta ect-role"><abbr title="${_('Namespace')}">${prop.enumeration.id}</abbr></span>
        </acre:block>  
      </acre:block>
      <span acre:if="prop.unit" class="measurement-unit">${i18n.display_name(prop.unit)}</span>
    </td>
    <td class="even description">
      <p acre:if="prop.tip">${i18n.display_name(prop, "", "tip")}</p>
      <span acre:if="prop.delegated" class="property-meta" acre:trim="">
        <abbr title="${h.sprintf(_('This is a property is delegated to %s'), prop.delegated.id)}">${_('delegated')}</abbr>
      </span><span acre:elif="prop.master_property" class="property-meta" acre:trim="">
        <abbr title="${_('This is a reverse property')}">${_('reverse')}</abbr>
      </span><span acre:else="" class="property-meta" acre:trim="">
        <abbr title="${_('This is a master property')}">${_('master')}</abbr>
      </span><span acre:if="prop.unique" class="property-meta" acre:trim="">,
        <abbr title="${_('This property can only have a single value')}">${_('unique')}</abbr>
      </span><span acre:if="prop.disambiguator" class="property-meta" acre:trim="">,
        <abbr title="${_('This property is a disambiguator')}">${_('disambiguating')}</abbr>
      </span><span acre:if="prop.display_none" class="property-meta" acre:trim="">,
        <abbr title="${_('This property is hidden by default')}">${_('hidden')}</abbr>
      </span>
   </td>
  </tr>
</acre:block>

<!-- Native Properties markup pattern -->
<acre:block def="native_properties(properties, type_id)">
  <tbody>
    <tr acre:attrs="properties.length ? {}:{style:'display:none;'}">
      <th scope="col" class="column-header first">${_('Property')}</th>
      <th class="column-header">${_('ID')}</th>
      <th class="column-header">${_('Expected Type')}</th>
      <th class="column-header description">${_('Description')}</th>
    </tr>
    <tr acre:attrs="properties.length ? {style:'display:none;'}:{}">
      <th colspan="5" class="table-empty-column" scope="col">
        <h3 class="table-empty-title">${_("This type doesn't have any properties")}</h3>
      </th>
    </tr> 
    <acre:block for="prop in properties" class="hoverable">
      ${type_property_row(prop, type_id)}
    </acre:block>
  </tbody>
</acre:block>

<!-- enumerated topics -->
<acre:block def="enumerated_topic_row(topic, type_id)">
  <tr>
    <th class="row-header first odd">
      <a href="${h.freebase_url('/view'+topic.id)}" title="${topic.id}">${i18n.display_name(topic)}</a>
      <a href="javascript:void(0);" class="row-menu-trigger">+</a>
      <ul class="row-menu tooltip">
        <li class="row-menu-item edit">
          <a href="#" class="icon-link" onclick="return freebase.dispatch(event, freebase.schema.type.delete_instance, ['${topic.id}','${type_id}'], this);"><span class="delete-icon">${_('Remove topic')}</span></a>
        </li>
       <li class="row-menu-item"><a href="${h.freebase_url('/view' + topic.id)}" title="${topic.id}">${_('View topic')}/a></li>
     </ul>
    </th>
    <td class="even">
      <acre:script>
        var blurb = i18n.display_article(topic, "blurb");
      </acre:script>
      <p>${blurb || ""}</p>
    </td>
  </tr>  
</acre:block>

<!-- Included Types markup pattern -->
<acre:block def="included_type_thead(type_id, included_type, expanded)">
  <thead>
    <tr>
      <th class="tbody-header ${expanded ? 'expanded' : ''}" colspan="4" 
         data-url="${h.url_for('schema', 'type', [['id',included_type.id]] , '/get_type_properties')}">
        <a href="#" class="edit" onclick="return freebase.dispatch(event, freebase.schema.type.delete_included_type, ['${type_id}', '${included_type.id}'], this);"><span>${_('delete')}</span></a>
        <span class="tbody-header-title">${i18n.display_name(included_type)}</span> 
        <a href="${h.url_for('schema', null, null, included_type.id)}"><span class="key">$included_type.id</span></a>
      </th>
    </tr>
  </thead>
</acre:block>

<!-- Incoming Properties markup pattern -->
<acre:block def="incoming_props_thead(name, expanded, data_url)">
  <thead>
    <tr>
      <th class="tbody-header ${expanded ? 'expanded' : ''}" colspan="4"
          data-url="${data_url ? data_url : ''}">
        <span class="tbody-header-title ${expanded ? 'expanded' : ''}">$name</span>
     </th>
    </tr>
  </thead>
</acre:block>

<acre:block def="incoming_props_tbody(props)">
  <tbody>
    <tr>
      <th class="column-header first" scope="col">${_('Originating Type')}</th>              
      <th class="column-header" scope="col">${_('Property')}</th>
    </tr>
    <tr acre:for="prop in props" class="hoverable">
      <td class="odd">
        <div>
          <a href="${h.url_for('schema', null, null, prop.schema.id)}">${i18n.display_name(prop.schema)}</a>
          <acre:script>
            var other_property = prop.master_property || prop.reverse_property;
          </acre:script>
          <acre:block if="other_property">
            <span class="return-link-trigger"></span>
            <span class="return-link-description">
              <strong>${i18n.display_name(prop)}</strong> has a return link of
              <strong>${i18n.display_name(other_property)}</strong>
              from <strong>${i18n.display_name(other_property.schema)}</strong>
              <span class="return-link-pointer"></span>
            </span>        
          </acre:block>  
          <a href="javascript:void(0);" class="row-menu-trigger">+</a>
          <ul class="row-menu tooltip">          
            <li acre:if="!other_property" class="row-menu-item edit">
              <a href="#" class="icon-link" onclick="return freebase.dispatch(event, freebase.schema.type.reverse_property, ['${prop.expected_type}','${prop.id}'], this);"><span class="create-return-link-icon">${_('Create return link')}</span></a>
            </li>
            <li class="row-menu-item"><a href="${h.url_for('schema', null, null, prop.schema.id)}">${_('View type schema')}</a></li>
            <li class="row-menu-item"><a href="${h.freebase_url('/view'+prop.schema.id)}">${_('Browse instances')}</a></li>
            <li class="row-menu-item last"><a href="#">${_('Build query')}</a></li>
          </ul>          
        </div>
        <span class="key">$prop.schema.id</span>     
      </td>
      <td class="even">
        <div>
          <a href="${h.url_for('schema', null, null, prop.id)}">${i18n.display_name(prop)}</a>
          <acre:script>
            var other_property = prop.master_property || prop.reverse_property;
          </acre:script>
          <a href="javascript:void(0);" class="row-menu-trigger">+</a>
          <ul class="row-menu tooltip">
            <li class="row-menu-item"><a href="${h.url_for('schema', null, null, prop.id)}">${_('View property details')}</a></li>
            <li class="row-menu-item last"><a href="#">${_('Build query')}</a></li>
          </ul>          
        </div>
        <span class="key">$prop.id</span>     
      </td>
    </tr>
  </tbody>  
</acre:block>

<!-- Markup pattern for left-hand table of Type Diagram -->
<acre:block def="type_diagram_incoming_props(props)">
  <acre:block for="i,prop in props">
    <acre:script>
      var global = sh.isGlobal(prop.id);
      transition = global != previous_global;
      previous_global = global;
      var same = (previous == prop.schema.id);
      previous = prop.schema.id;
    </acre:script>
    <tr acre:if="transition && i > 0" class="separator">
      <td class="c1"></td>
      <td class="c1 spacer"></td>
      <td class="c7">&nbsp;</td>
    </tr>
    <tr class="${global ? 'global' : 'local'} ${prop.inherited ? 'inherited' : ''}">
      <td nowrap="" class="c1 in_type ${prop.schema.mediator ? 'mediator' : 'truetype'}">
        <acre:block if="!same || i == 0">
          <a href="${h.url_for('schema', null, null, prop.id)}" title="${prop.schema.id} ${prop.schema.mediator ? '| mediator' : ''}">${i18n.display_name(prop.schema)}</a>
        </acre:block>
      </td>
      <td class="${same ? '' : 'c2'} spacer"></td>
      <td nowrap="" class="in_prop ${(i == 0) ? 'c2' : same ? 'c4' : 'c5'} ${prop.master_property == null ? 'master' : ''} ${prop.unique ? 'unique' : ''}">
        <a href="${h.url_for('schema', null, null, prop.id)}" title="${prop.id} ${prop.master_property == null ? '| master' : ''} ${prop.unique ? '| unique' : ''}">${i18n.display_name(prop)}</a>
      </td>
    </tr>
  </acre:block>
</acre:block>

<!-- Markup pattern for right-hand table of Type diagram -->

<acre:block def="type_diagram_inherited_props(properties)">
  <acre:block acre:for="i, prop in properties">
  <acre:script>
    var global = sh.isGlobal(prop.id);
    transition = global != previous_global;
    previous_global = global;
    var same = false;
    previous = null;
    if (prop.expected_type) {
      same = (previous == prop.expected_type.id);
      previous = prop.expected_type.id;
    }
  </acre:script>                
    <tr acre:if="transition && i > 0" class="separator">
      <td class="c1 spacer"></td>
      <td class="c8">&nbsp;</td>
      <td class="c1 spacer"></td>
      <td class="c1"></td>
    </tr>
    <tr class="${sh.isGlobal(prop.id) ? 'global' : 'local'} ${prop.inherited ? 'inherited' : ''}">
      <td nowrap="" class="out_prop ${(i == 0) ? 'c2' : same ? 'c4' : 'c6' } ${prop.master_property == null ? 'master' : ''} ${prop.unique ? 'unique' : ''}">
        <a href="${h.url_for('schema', null, null, prop.id)}">${i18n.display_name(prop)}</a>
      </td>
      <td class="${same && i != 0 ? '' : 'c3'} spacer"></td>
      <td acre:if="prop.expected_type" nowrap="" class="c1 out_type ${prop.expected_type.mediator ? 'mediator' : 'truetype'} ${sh.isTypeType(prop.expected_type.id) ? 'typetype' : ''}">
        <acre:block if="!same || i == 0">
          <a href="${h.url_for('schema', null, null, prop.id)}" title="${prop.expected_type.id} ${prop.expected_type.mediator ? '| mediator' : ''}">${i18n.display_name(prop.expected_type)}</a>
        </acre:block>
      </td>
      <td acre:else="" class="c1 out_type">&nbsp;</td>
    </tr>    
  </acre:block>
</acre:block>

<!-- Markup pattern for native props of Type diagram -->

<acre:block def="type_diagram_native_props(properties)">
  <acre:block acre:for="i, prop in properties">
  <acre:script>
    var global = sh.isGlobal(prop.id);
    transition = global != previous_global;
    previous_global = global;
    var same = false;
    previous = null; 
    if (prop.expected_type) {
      same = (previous == prop.expected_type.id);
      previous = prop.expected_type.id;
    }
  </acre:script>                
    <tr acre:if="transition && i > 0" class="separator">
      <td class="c1 spacer"></td>
      <td class="c8">&nbsp;</td>
      <td class="c1 spacer"></td>
      <td class="c1"></td>
    </tr>
    <tr class="${sh.isGlobal(prop.id) ? 'global' : 'local'} ${prop.inherited ? 'inherited' : ''}">
      <td nowrap="" class="out_prop ${(i == 0) ? 'c2' : same ? 'c4' : 'c6' } ${prop.master_property == null ? 'master' : ''} ${prop.unique ? 'unique' : ''}">
        <a href="${h.url_for('schema', null, null, prop.id)}">${i18n.display_name(prop)}</a>
      </td>
      <td class="${same && i != 0 ? '' : 'c3'} spacer"></td>
      <td acre:if="prop.expected_type" nowrap="" class="c1 out_type ${prop.expected_type.mediator ? 'mediator' : 'truetype'} ${sh.isTypeType(prop.expected_type.id) ? 'typetype' : ''}">
        <acre:block if="!same || i == 0">
          <a href="${h.url_for('schema', null, null, prop.id)}" title="${prop.expected_type.id} ${prop.expected_type.mediator ? '| mediator' : ''}">${i18n.display_name(prop.expected_type)}</a>
        </acre:block>
      </td>
      <td acre:else="" class="c1 out_type">&nbsp;</td>
    </tr>    
  </acre:block>
</acre:block>
