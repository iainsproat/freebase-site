/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require("lib/validator/validators.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var datejs = acre.require("lib/helper/helpers.sjs");
var apis = acre.require("lib/promise/apis.sjs"),
    deferred = apis.deferred,
    freebase = apis.freebase,
    urlfetch = apis.urlfetch;

var SPEC = {

  template: "browse.mjt",

  template_base: "lib/template/browse.mjt",

  validate: function(params) {
    return [
      validators.Int(params, "days", {if_missing: 7})
    ];
  },

  run: function(days) {
    return {
      days: days,
      loads: recent_loads(days)
    };
  }

};

function recent_loads(days) {
  return freebase.mqlread(recent_loads_mql(days))
    .then(function(env) {
      return env.result || [];
    })
    .then(function(loads) {
      loads.forEach(function(l) {
        l.timestamp = null;
        l.objects = 0;
        l.links = 0;
        l.authority.forEach(function(a) {
          //var timestamp = acre.freebase.date_from_iso(a["s:links"].timestamp);
          var timestamp = a["s:links"].timestamp;
          l.timestamp = (!l.timestamp || (timestamp > l.timestamp)) ? timestamp : l.timestamp;
          l.objects += a.attributed;
          l.links += a.links;
        });
      });
      return loads;
    });
};

function recent_loads_mql(days) {
  var timestamp = acre.freebase.date_to_iso(datejs.Date.today().addDays(-days));
  var q = [{
    "id": null,
    "name": i18n.mql.query.name(),
    "type": "/dataworld/mass_data_operation",
    "authority": [{
      "type": "/type/attribution",
      "s:links": {
        "timestamp": null,
        "limit": 1
      },
      "links": {
        "timestamp>": timestamp,
        "return": "count"
      },
      "attributed": {
        "timestamp>": timestamp,
        "return": "count",
        "optional": true
      }
    }],
    "operator": null,
    "creator": null,
    "f:creator": {
      "id": "/user/gardening_bot",
      "optional": "forbidden"
    },
    "sort": "-authority.s:links.timestamp",
    "limit": 50
  }];
  return q;
};
