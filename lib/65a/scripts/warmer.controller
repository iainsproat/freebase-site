/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");

var SPEC = {

  template: "scripts/warmer.mjt",
  template_base: "template/freebase.mjt",

  validate: function(params) {
    if (params.app) {
      // jsonp
      return [
        rules,
        validators.String(params, "app", {required:true}),
        validators.Jsonp(params, "callback", {required:true})             
      ];
    }
    else {
      // render page to warm all scripts
      return [
        rules,
        null,
        null
      ];
    }
  },

  run: function(rules, app, callback) {
    if (app) {
      // require all files
      var md = acre.get_metadata(app);
      var filenames = [];
      for (var filename in md.files) {
        var result;
        if (filename.match(/\/?test\//)) {
          continue;
        }
        try {
          acre.require(md.path + "/" + filename);
          result = "success";
        } catch(e) {
          result = e.message || +e;
        }
        filenames.push({
          file: filename,
          result: result
        });
      }
      acre.response.status = 200;
      acre.response.set_header('content-type', 'text/javascript; charset=utf-8');
      var json = {
        app: app,
        files: filenames
      };
      var str = [
        "/** this is jsonp **/ ",
        callback,
        "(",
        JSON.stringify(json),
        ");"
      ];
      acre.write(str.join(""));
      return acre.exit();  
    }
    else {
      return {
        apps: rules.labels
      }
    }
  }
};



