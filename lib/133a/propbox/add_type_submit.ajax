/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require('validator/validators.sjs');
var typeloader = acre.require('schema/typeloader.sjs');
var propbox = acre.require('propbox/propbox.mjt');
var apis = acre.require('promise/apis');
var freebase = apis.freebase;
var deferred = apis.deferred;

/**
 * add type form
 */
var SPEC = {

  method: 'POST',

  auth: true,

  validate: function(params) {
    return [
      validators.MqlId(params, 'id', {required:true}),
      validators.MqlId(params, 'type', {required:true}),
      validators.LangId(params, 'lang', {if_empty:'/lang/en'})
    ];
  },

  run: function(id, type, lang) {
    // Load type schema to get included types
    return typeloader.load(type, lang)
      .then(function(schema) {
        // Assert type and its included types
        var included_types = schema['/freebase/type_hints/included_types'];
        var type_clause = [{
          id: type,
          connect: 'insert'
        }].concat(included_types.map(function(t) {
          return {
            id: t,
            connect: 'insert'
          };
        }));
        var q = {
          id: id,
          type: type_clause
        };
        return freebase.mqlwrite(q)
          .then(function(env) {
            return {
              // Success message
              html: acre.markup.stringify(
                propbox.add_type_result(id, type, included_types, lang))
            };
        });
      });
    }
};

