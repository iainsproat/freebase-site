/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");
var propbox = acre.require("propbox/propbox.mjt");
var queries = acre.require("propbox/queries.sjs");
var ph = acre.require("propbox/helpers.sjs");
var promise_apis = acre.require("promise/apis.sjs");
var freebase = promise_apis.freebase;
var deferred = promise_apis.deferred;

/**
 * prop add form
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    var namespace = null;
    if (params.p === "/type/object/key" || params.p === "/type/namespace/keys") {
      // namespace is required when editing keys
      namespace = validators.MqlId(params, "namespace", {required:null});
    }
    var args = [
      validators.MqlId(params, "s", {required:true}),            // subject id
      validators.MqlId(params, "p", {required:true}),            // property id
      validators.String(params, "o", {required:true}),           // object id or value
      validators.LangId(params, "lang", {if_empty:"/lang/en"}),  // lang
      namespace,
      params.auth_user.id
    ];

    return args;
  },

  run: function(s, p, o, lang, namespace, user_id) {
    // we want to make sure we are looking at the latest
    return freebase.touch()
    .then(function(){
      return queries.prop_structure(p, lang);
    }).then(function(prop_structure) {
        return queries.prop_values(s, prop_structure, o, lang, namespace)
          .then(function(prop_values) {
            if (prop_values.length) {
              var prop_value = h.first_element(prop_values);
              if (ph.user_can_edit(user_id, prop_structure, prop_value)) {
                return run_delete(s, prop_structure, o, lang, namespace);
              }
              else {
                throw new Error(
                  'User does not have permission to remove this value.');
              }
            }
            else {
              // The thing we're trying to delete is no longer valie.
              // Alert user to reload (touch) and try again.
              return {
                invalid: true,
                reload: true
              };
            }
          });
      });
  }
};


function run_delete(s, prop_structure, o, lang, namespace) {
  var q = {
    id: s
  };
  var clause = {connect:"delete"};
  var ect = prop_structure.expected_type.id;
  if (h.is_literal_type(ect)) {
    /**
     * Convert string value to native value
     */
    clause.value = h.to_literal_value(ect, o);
    if (ect === "/type/text") {
      clause.lang = lang;
    }
    else if (ect === "/type/key") {
      clause.namespace = namespace;
    }
  }
  else {
    clause.id = o;
  }
  q[prop_structure.id] = clause;
  return freebase.mqlwrite(q)
    .then(function(env) {
      return {
        html: acre.markup.stringify(propbox.value_delete_result(s, prop_structure, o, lang))
      };
    });
};
