/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("helper/helpers.sjs");
var validators = acre.require("validator/validators.sjs");
var propbox = acre.require("propbox/propbox.mjt");
var queries = acre.require("propbox/queries.sjs");
var ph = acre.require("propbox/helpers.sjs");
var promise_apis = acre.require("promise/apis.sjs");
var freebase = promise_apis.freebase;
var deferred = promise_apis.deferred;

/** connected responses corresponding to "insertions" **/
var CONNECTED = {
  "inserted": 1,
  "updated": 1,
  "present": 1
};

var CONNECT = {
  'insert': 1,
  'update': 1,
  'replace': 1
};

/**
 * prop add form
 */
var SPEC = {

  method: "POST",

  auth: true,

  validate: function(params) {
    var args = [
      validators.MqlId(params, "s", {required:true}),            // subject id
      validators.MqlId(params, "p", {required:true}),            // property id
      validators.Array(validators.Json(params, "o", {required:true})), // object operations
      validators.LangId(params, "lang", {if_empty:"/lang/en"})  // lang
    ];

    return args;
  },

  run: function(s, p, o, lang) {
    var q = {id:s};
    // TODO: assert o (object operations), > 0
    q[p] = o;
    return freebase.mqlwrite(q)
      .then(function(env) {
        // TODO: check write result
        return env.result;
      })
      .then(function(result) {
        // query to get the full prop_data to get the names (lang) and subproperties (mediators)
        return queries.prop_structure(p, lang)
          .then(function(prop_structure) {
            // the new object value that we just inserted
            // which is the first operation != connect:"delete"
            var clauses = result[p];
            var object_value;
            for (var i=0,l=clauses.length; i<l; i++) {
              var clause = clauses[i];
              if (!clause.connect || CONNECTED[clause.connect]) {
                var ect = prop_structure.expected_type.id;
                if (h.is_literal_type(ect)) {
                  /**
                   * TODO(daepark) - We can't use clause.value since
                   * mqlwrite is reporting '&' as '&amp;' because html_escape
                   * is on by default (internal bug filed).
                   * For now use the supplied value from params.o
                   *
                   * object_value = clause.value;
                   * // TODO(daepark): assert clause.lang === lang
                   */
                  o.every(function(clause) {
                    if (CONNECT[clause.connect]) {
                      object_value = clause.value;
                      return false;
                    }
                    return true;
                  });
                }
                else {
                  object_value = clause.id;
                }
                break;
              }
            }
            // TODO: assert object_value
            return queries.prop_values(s, prop_structure, object_value, lang)
             .then(function(prop_values) {
               var prop_value = h.first_element(prop_values);
               var new_row;
               if (prop_structure.expected_type.mediator) {
                 // output table row (<tr>) if mediator
                 new_row = propbox.datatable_row({id: s}, prop_structure, prop_value, lang);
               }
               else {
                 // output list row (<li>) for everything else
                 new_row = propbox.datalist_row({id: s}, prop_structure, prop_value, lang);
               }
               return {
                 // <debug>
                 mqlwrite: q,
                 result: result,
                 object_value: object_value,
                 prop_structure: prop_structure,
                 prop_values: prop_values,
                 // </debug>

                 html: acre.markup.stringify(new_row)
               };
             });
           });
         });
  }
};
