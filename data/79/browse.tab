/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var h = acre.require("lib/helper/helpers.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var apis = acre.require("lib/promise/apis"),
    freebase = apis.freebase,
    urlfetch = apis.urlfetch,
    deferred = apis.deferred;
var dh = acre.require("helpers.sjs");
var queries = acre.require("queries.sjs");

var SPEC = {

  cache_policy: "public",

  template: "browse.mjt",

  template_base: "lib/template/browse.mjt",

  validate: function(params) {
    return [ params.total_stats ];
  },

  run: function(total_stats) {
    // Check if we should invalidate cache of domain names for all languages
    var invalidated = dh.invalidate_domain_cache_maybe();

    var promises = {};

    // Load domains possibly from memcache
    promises.domains = queries.load_commons_domains();

    // Load stats from Stats API
    promises.stats = total_stats;

    return deferred.all(promises)
      .then(function(result) {
        // attach topic/triple counts to domains
        return domain_topics_triples(result.domains, result.stats);
      })
      .then(function(domains) {
        // sort by topic count
        return {
          domains: domains.sort(sort_by_entities_count)
        };
      });
  }
};

function sort_by_entities_count(a,b) {
  var a_count = a.topics ? a.topics.count : 0;
  var b_count = b.topics ? b.topics.count : 0;
  return b_count > a_count;
}

function domain_topics_triples(domains, stats) {
  // If Stats API call failed, just return domains
  if(!stats.triples_by_domain) return domains;

  var max_entities_count = null;
  var min_entities_count = null;
  var max_triples_count = null;
  var min_triples_count = null;

  var entities_count = stats.entities_by_domain;
  var triples_count = stats.triples_by_domain;

  // Find max/min and filter out not paired domains-stats
  domains = domains.filter(function(domain){
    if (entities_count && triples_count &&
        entities_count[domain.id] && triples_count[domain.id]) {
      domain.topics = {count: entities_count[domain.id]};
      domain.facts = {count: triples_count[domain.id]};

      if (max_entities_count === null ||
          domain.topics.count > max_entities_count) {
        max_entities_count = domain.topics.count;
      }
      if (min_entities_count === null ||
          domain.topics.count < min_entities_count) {
        min_entities_count = domain.topics.count;
      }
      if (max_triples_count === null ||
          domain.facts.count > max_triples_count) {
        max_triples_count = domain.facts.count;
      }
      if (min_triples_count === null ||
          domain.facts.count < min_triples_count) {
        min_triples_count = domain.facts.count;
      }
      return true;
    } else {
      return false;
    }
  });

  /**
   * Calculate logarithmic scale of topic/fact counts from 0 to 100.
   */
  var entities_count_scale = null;
  var triples_count_scale = null;
  if (! (max_entities_count === null || min_entities_count === null)) {
    entities_count_scale =
      (Math.log(max_entities_count) - Math.log(min_entities_count)) / 100;
  }
  if (! (max_triples_count === null || min_triples_count === null)) {
    triples_count_scale =
      (Math.log(max_triples_count) - Math.log(min_triples_count)) / 100;
  }

  domains.forEach(function(domain) {
    if (domain.topics) {
      domain.topics.log_percent = Math.round(
        ((Math.log(domain.topics.count) -
         Math.log(min_entities_count)) / entities_count_scale));
    }
    if (domain.facts) {
      domain.facts.log_percent = Math.round(
        ((Math.log(domain.facts.count) -
         Math.log(min_triples_count)) / triples_count_scale));
    }
  });

  return domains;

}
