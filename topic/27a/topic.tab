/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
var h = acre.require("lib/helper/helpers.sjs");
var i18n = acre.require("lib/i18n/i18n.sjs");
var validators = acre.require("lib/validator/validators.sjs");
var filters = acre.require("lib/filter/filters.sjs");
var fh = acre.require("lib/filter/helpers.sjs");
var filter_queries = acre.require("lib/filter/queries.sjs");
var deferred = acre.require("lib/promise/deferred.sjs");
var topic_api = acre.require("lib/queries/topic.sjs");

var topic_filters = {
  limit: {
    validator: validators.Int,
    options: {if_empty:null}
  }
};

var SPEC = {

  template: "topic.mjt",

  validate: function(params) {
    return [
      params.object,
      (function() {
        var f = filters.validate(params, topic_filters);
        f[params.current_tab.key] = "";
        return f;
      })()
    ];
  },

  run: function(object, f) {
    var id = object.id;
    var domains = f.domains;
    if ((f.domain && !h.is_commons_id(f.domain)) ||
        (f.type && !h.is_commons_id(f.type)) ||
        (f.property && !h.is_commons_id(f.property))) {
      domains = "all";
    }

    var promises = {
      prop_counts: filter_queries.prop_counts_by_guid(object.guid),
      topic: topic_api.topic(id, i18n.lang, f.limit, f.as_of_time, domains),
      object: object
    };

    return deferred.all(promises)
      .then(function(result) {
        h.extend(result, {
          id: id,
          filters: f
        });

        var object = result.object;
        if (object) {
          if (domains !== "all") {
            // filter base/user types
            object.type = object.type.filter(function(type) {
              return h.is_commons_id(type.id);
            });
          }

          // sort types alphabetically for display
          function compare(a, b) {
            if (a.id < b.id) return -1;
            if (a.id > b.id) return 1;
            return 0;
          }
          object.type.sort(compare);
        }

        var topic = result.topic;
        if (topic && topic.structure) {
          if (f.domain) {
            _filter_by_domain(topic, f.domain);
          }
          else if (f.type) {
            _filter_by_type(topic, f.type);
          }
          else if (f.property) {
            _filter_by_property(topic, f.property);
          }
        }

        result.blurb = topic.description;

        return result;
      });
  }
};

function _filter_by_domain(topic, domain_id) {
  // just modify topic.structure.order to only include domain_id
  if (domain_id) {
    topic.structure.order = [domain_id];
  }
  else {
    topic.structure.order = [];
  }
};

function _filter_by_type(topic, type_id) {
  var domain_id;
  if (type_id && topic.structure.domains) {
    for (var key in topic.structure.domains) {
      var domain = topic.structure.domains[key];
      if (domain && domain.types) {
        for (var i=0,l=domain.types.length; i<l; i++) {
          if (domain.types[i] === type_id) {
            domain_id = key;
            domain.types = [type_id];
            break;
          }
        }
        if (domain_id) {
          break;
        }
      }
    }
  }
  _filter_by_domain(topic, domain_id);
  return topic;
};

function _filter_by_property(topic, prop_id) {
  var type_id;
  if (prop_id && topic.structure.types) {
    for (var key in topic.structure.types) {
      var type = topic.structure.types[key];
      if (type && type.properties) {
        for (var i=0,l=type.properties.length; i<l; i++) {
          if (type.properties[i] === prop_id) {
            type_id = key;
            type.properties = [prop_id];
            break;
          }
        }
        if (type_id) {
          break;
        }
      }
    }
  }
  _filter_by_type(topic, type_id);
  return topic;
};
