/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var validators = acre.require('lib/validator/validators.sjs');
var propbox = acre.require('lib/propbox/propbox.mjt');
var queries = acre.require('lib/propbox/queries.sjs');
var typeloader = acre.require('lib/schema/typeloader.sjs');
var proploader = acre.require('lib/schema/proploader.sjs');
var topic_query = acre.require('lib/queries/topic.sjs');
var t = acre.require('topic.mjt');
var apis = acre.require('lib/promise/apis.sjs');
var freebase = apis.freebase;
var deferred = apis.deferred;

/**
 * Get an empty type-section for a topic.
 */
var SPEC = {

  method: 'GET',

  validate: function(params) {
    // property or type is required
    var schema_id = null;
    var is_property = false;
    if ('property' in params) {
      schema_id = validators.MqlId(params, 'property', {required:true});
      is_property = true;
    }
    else {
      schema_id = validators.MqlId(params, 'type', {required:true});
    }
    return [
      validators.MqlId(params, 'id', {required:true}),           // subject id
      schema_id,
      is_property,
      validators.LangId(params, 'lang', {if_empty:'/lang/en'})   // lang id
    ];
  },

  run: function(id, type_or_prop_id, is_property, lang) {
    var d = null;
    if (is_property) {
      d = proploader.load(type_or_prop_id, lang)
        .then(function(prop) {
          // This should be fast since we've already loaded the property,
          // therefore already loaded the type.
          return typeloader.load(prop.schema.id, lang);
        });
    }
    else {
      d = typeloader.load(type_or_prop_id, lang);
    }

    return d
      .then(function(schema) {
        var domain = h.extend(true, {
          'types': []
        }, schema.domain);
        domain.types.push(schema);
        var structure = topic_query.to_structure([domain], lang);
        var topic = {
          id: id,
          property: {},
          structure: structure
        };
        return {
          // This is a domain box with one (empty) type-section
          html: acre.markup.stringify(propbox.topicbox(topic, lang)),
          // This is a toc domain with one type navigation link
          toc: acre.markup.stringify(t.toc_domain(topic, domain.id))
        };
      });
  }
};
